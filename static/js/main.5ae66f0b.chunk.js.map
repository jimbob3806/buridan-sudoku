{"version":3,"sources":["serviceWorker.js","styles/theme.js","context/Header.js","context/states/Header.js","context/Main.js","context/Global.js","hooks/windowSize.js","context/states/Main.js","styles/hooks/header.js","components/header/Header.js","components/header/Drawer.js","pages/Instructions.js","hooks/getPuzzles.js","hooks/loadPuzzle.js","functions/isOddBox.js","pages/LoadPuzzle.js","functions/sudokuEncode.js","pages/SetPuzzle.js","functions/rectifyIndex.js","hooks/watchKey.js","pages/SolvePuzzle.js","styles/jss/grid.js","styles/jss/dialog.js","styles/hooks/main.js","components/Main.js","components/selectors/Input.js","components/selectors/Number.js","components/selectors/Operation.js","hooks/initSelectedCell.js","components/SudokuGrid.js","components/dialogs/Check.js","components/dialogs/Restart.js","components/dialogs/Populate.js","components/dialogs/Test.js","hooks/storePuzzle.js","hooks/setPuzzle.js","styles/hooks/app.js","App.js","context/reducers/answer.js","context/reducers/candidate.js","context/reducers/test.js","context/states/Global.js","index.js","styles/index.scss"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","theme","createMuiTheme","palette","common","black","variables","neutralColor11","white","neutralColor1","background","paper","neutralColor4","default","neutralColor2","primary","light","primaryColor5","main","primaryColor8","dark","primaryColor11","contrastText","secondary","secondaryColor5","secondaryColor8","secondaryColor11","redHighlight5","redHighlight8","redHighlight11","text","neutralColor13","neutralColor10","disabled","neutralColor8","hint","neutralColor6","overrides","MuiToggleButton","root","padding","&:last-child","paddingLeft","sizeSmall","minWidth","minHeight","MuiButton","MuiButtonGroup","grouped","MuiSvgIcon","color","fontSize","createContext","pathLoaded","isDrawerOpen","setIsDrawerOpen","HeaderState","props","_useState","useState","_useState2","Object","slicedToArray","react_default","a","createElement","context_Header","Provider","value","pathname","children","selectedCell","inputMethod","methods","responsiveSize","currentDialog","dialogs","answersRemoved","firstTest","setSelectedCell","setInputMethod","setResponsiveSize","setCurrentDialog","setAnswersRemoved","setFirstTest","handleChange","handleCheck","handleGiveAnswer","handleRemoveCell","handleRestart","handlePopulateCandidates","deleteTest","removeInitCandidate","testToAnswer","puzzle","solution","answer","candidates","test","setPuzzle","setSolution","setAnswer","setCandidate","setTest","useWindowSize","width","innerWidth","height","innerHeight","windowSize","setWindowSize","handleSizeChange","useEffect","addEventListener","removeEventListener","MainState","context","useContext","GlobalContext","_useState3","_useState4","ANSWER","CANDIDATES","TEST","_useState5","_useState6","_useState7","_useState8","CHECK","RESTART","POPULATE_CANDIDATES","_useState9","_useState10","_useState11","_useState12","size","handleRemoveAnswer","cell","arguments","length","undefined","remove","handleRemoveTest","handleAnswerChange","number","numString","concat","add","handleCandidateChange","includes","handleTestChange","reduce","acc","cur","index","context_Main","divider","Math","floor","countAnswersRemoved","map","burnOne","handleRemoveCandidates","num","useHeaderStyles","makeStyles","header","drawer","backgroundColor","drawerItem","textDecoration","& svg.MuiSvgIcon-root","drawerItemActive","Header","headerContext","HeaderContext","styles","AppBar","position","className","Toolbar","IconButton","edge","aria-label","onClick","Menu","SwipeableDrawer","anchor","open","onOpen","onClose","Drawer","HeaderDrawer","linkStyle","path","List","react_router_dom","to","ListItem","button","ListItemIcon","GridOn","ListItemText","Folder","Create","Help","Instructions","useGetPuzzles","keys","objectSpread","localStorage","split","toConsumableArray","key","JSON","parse","getItem","useLoadPuzzle","localPuzzle","burnAll","candidateArray","candidate","isOddBox","numArray","_concat","initialArray","newArrays","seed","firstBox","LoadPuzzle","puzzleToLoad","setPuzzleToLoad","localPuzzles","displayArray","join","rows","count","push","row","splice","grid","Paper","onMouseDown","base65Dict","encode","solutionString","puzzleString","solutionRows","toRows","encodeBase65","decode","decoded","encoded","slice","val","decodeBase65","toString","decimal","base65","exponent","floorLogBase","power","pow","exponentCoefficient","indexOf","string","chunkSize","result","base","SetPuzzle","field","event","target","noValidate","autoComplete","TextField","label","onChange","margin","type","variant","Button","encodedOriginal","encodedAnswer","setItem","stringify","lastActive","Date","storePuzzle","rectifyIndex","wrapType","noClueAtIndex","nextIndex","wrapIndex","useWatchKey","mainContext","MainContext","watchKey","fromEvent","document","subscribe","stopImmediatePropagation","letter","toUpperCase","unsubscribe","SolvePuzzle","solverContainer","Operation","dialogs_Check","Restart","Populate","dialogs_Test","Input","components_SudokuGrid","selectors_Number","gridStyles","display","justifyContent","alignItems","border","boxSizing","lineHeight","letterSpacing","flexWrap","neutralColor7","first","redHighlight9","remainder","greenHighlight6","flexDirection","primaryColor2","primaryColor4","selected","dialogStyles","errorDialog","& div.MuiDialogTitle-root","redHighlight4","& div.MuiDialogContent-root","& p.MuiDialogContentText-root","& div.MuiDialogActions-root","& span.MuiButton-label","cautionDialog","yellowHighlight1","notificationDialog","greenHighlight1","& li","useMainStyles","secondaryColor1","placeItems","gridTemplateColumns","gridTemplateRows","gridColumnGap","gridRowGap","gridTemplateAreas","buttonGroup","& button","neutralColor3","& button.Mui-selected","neutralColor5","& button.Mui-selected:hover","& button:hover","secondaryColor4","numberSelector","gridArea","operationSelector","inputSelector","sudoku","dialog","alignContent","Main","react_router","exact","pages_SolvePuzzle","pages_Instructions","pages_LoadPuzzle","pages_SetPuzzle","InputSelector","ToggleButtonGroup","method","exclusive","ToggleButton","Tooltip","title","Add","LiveHelp","CallSplit","NumberSelector","numbers","_loop","OperationSelector","ButtonGroup","Remove","Visibility","Check","Replay","Apps","useInitSelectedPuzzle","validIndexArray","indexMapArray","minDist","min","apply","closestIndexArray","random","SudokuGrid","useInitSelectedCell","CheckDialog","requiredStyle","Dialog","onEscapeKeyDown","maxWidth","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","RestartDialog","PopulateDialog","Test","useStorePuzzle","useSetPuzzle","defaultEncodedPuzzle","defaultDecodedSolution","defaultDecodedPuzzle","defaultPuzzle","econdedAnswer","encodedPuzzle","hash","replace","decodedPuzzle","history","replaceState","useAppStyles","app","App","GridList","cellHeight","spacing","GridListTile","cols","states_Header","header_Header","states_Main","components_Main","answerReducer","action","addAnswer","removeAnswer","answers","ansIndex","candidateReducer","addCandidate","removeCandidate","burnCandidates","candidateIndex","testReducer","addTest","removeTest","tests","testIndex","GlobalState","_useReducer","useReducer","_useReducer2","dispatchAnswer","_useReducer3","_useReducer4","dispatchCandidate","_useReducer5","_useReducer6","dispatchTest","Global","ReactDOM","render","states_Global","ThemeProvider","src_App","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker","module","exports","primaryColor1","primaryColor3","primaryColor6","primaryColor7","primaryColor9","primaryColor10","secondaryColor2","secondaryColor3","secondaryColor6","secondaryColor7","secondaryColor9","secondaryColor10","neutralColor9","neutralColor12","greenHighlight2","greenHighlight3","greenHighlight4","greenHighlight5","greenHighlight7","greenHighlight8","greenHighlight9","greenHighlight10","greenHighlight11","yellowHighlight2","yellowHighlight3","yellowHighlight4","yellowHighlight5","yellowHighlight6","yellowHighlight7","yellowHighlight8","yellowHighlight9","yellowHighlight10","yellowHighlight11","redHighlight1","redHighlight2","redHighlight3","redHighlight6","redHighlight7","redHighlight10"],"mappings":"sIAAMA,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACzB,2DAsCR,SAASC,EAAgBC,EAAOC,GAC5BC,UAAUC,cACLC,SAASJ,GACTK,KAAK,SAAAC,GACFA,EAAaC,cAAgB,WAC7B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,YAKxBC,QAAQC,IACJ,kHAKAb,GAAUA,EAAOc,UACjBd,EAAOc,SAAST,KAOpBO,QAAQC,IAAI,sCAERb,GAAUA,EAAOe,WACjBf,EAAOe,UAAUV,UAOxCW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,kDCHlDC,EAxEDC,YAAe,CACzBC,QAAS,CACLC,OAAQ,CACJC,MAAOC,IAAUC,eACjBC,MAAOF,IAAUG,eAErBC,WAAY,CACRC,MAAOL,IAAUM,cACjBC,QAASP,IAAUQ,eAEvBC,QAAS,CACLC,MAAOV,IAAUW,cACjBC,KAAMZ,IAAUa,cAChBC,KAAMd,IAAUe,eAChBC,aAAchB,IAAUG,eAE5Bc,UAAW,CACPP,MAAOV,IAAUkB,gBACjBN,KAAMZ,IAAUmB,gBAChBL,KAAMd,IAAUoB,iBAChBJ,aAAchB,IAAUG,eAE5BT,MAAO,CACHgB,MAAOV,IAAUqB,cACjBT,KAAMZ,IAAUsB,cAChBR,KAAMd,IAAUuB,eAChBP,aAAchB,IAAUG,eAE5BqB,KAAM,CACFf,QAAST,IAAUyB,eACnBR,UAAWjB,IAAU0B,eACrBC,SAAU3B,IAAU4B,cACpBC,KAAM7B,IAAU8B,gBAGxBC,UAAW,CAIPC,gBAAiB,CACbC,KAAM,CACFC,QAAS,SACTC,eAAgB,CACZC,YAAa,WAGrBC,UAAW,CACPC,SAAU,MACVC,UAAW,QAGnBC,UAAW,CACPH,UAAW,CACPH,QAAS,SACTI,SAAU,MACVC,UAAW,QAGnBE,eAAgB,CACZC,QAAS,CACLJ,SAAU,QAGlBK,WAAY,CACRV,KAAM,CACFW,MAAO,UACPC,SAAU,8CCxEXC,0BAAc,CACzBC,WAAY,aAEZC,cAAc,EACdC,gBAAiB,eCqBNC,EApBK,SAAAC,GAAS,IAAAC,EACeC,oBAAS,GADxBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClBJ,EADkBM,EAAA,GACJL,EADIK,EAAA,GAQzB,OACIG,EAAAC,EAAAC,cAACC,EAAcC,SAAf,CAAwBC,MAAS,CAC7Bf,WAJW,WAAQ,OAAO3E,SAAS2F,UAKnCf,aAAcA,EACdC,gBAAiBA,IAEhBE,EAAMa,WCnBJlB,0BAAc,CAGrBmB,aAAc,EAGdC,YAAa,GAEbC,QAAS,GAGTC,eAAgB,EAGhBC,cAAe,KAEfC,QAAS,GAITC,eAAgB,EAKhBC,UAAW,EAEXC,gBAAiB,aACjBC,eAAgB,aAChBC,kBAAmB,aACnBC,iBAAkB,aAClBC,kBAAmB,aACnBC,aAAc,aAGdC,aAAc,aAGdC,YAAa,aACbC,iBAAkB,aAClBC,iBAAkB,aAClBC,cAAe,aACfC,yBAA0B,aAG1BC,WAAY,aACZC,oBAAqB,aACrBC,aAAc,eC5CPzC,0BAAc,CAGzB0C,OAAQ,GAGRC,SAAU,GAGVC,OAAQ,GAIRC,WAAY,GAOZC,KAAM,GAENC,UAAW,aACXC,YAAa,aAGbC,UAAW,aACXC,aAAc,aACdC,QAAS,eCFEC,EA1BO,WAAM,IAAA9C,EAEYC,mBAAS,CACzC8C,MAAOhI,OAAOiI,WACdC,OAAQlI,OAAOmI,cAJKhD,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEjBmD,EAFiBjD,EAAA,GAELkD,EAFKlD,EAAA,GAOlBmD,EAAmB,WACrBD,EAAe,CACXL,MAAOhI,OAAOiI,WACdC,OAAQlI,OAAOmI,eAYvB,OATAI,oBAAU,WAIN,OAFAvI,OAAOwI,iBAAiB,SAAUF,GAE3B,WACHtI,OAAOyI,oBAAoB,SAAUH,MAItCF,GCmPIM,EAhQG,SAAA1D,GAEd,IAAM2D,EAAUC,qBAAWC,GAFJ5D,EAIiBC,qBAJjBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAIhBa,EAJgBX,EAAA,GAIFmB,EAJEnB,EAAA,GAAA2D,EAKe5D,mBAAS,UALxB6D,EAAA3D,OAAAC,EAAA,EAAAD,CAAA0D,EAAA,GAKhB/C,EALgBgD,EAAA,GAKHxC,EALGwC,EAAA,GAOjB/C,EAAU,CACZgD,OAAQ,SACRC,WAAY,aACZC,KAAM,QAVaC,EAYqBjE,qBAZrBkE,EAAAhE,OAAAC,EAAA,EAAAD,CAAA+D,EAAA,GAYhBlD,EAZgBmD,EAAA,GAYA5C,EAZA4C,EAAA,GAAAC,EAamBnE,mBAAS,MAb5BoE,EAAAlE,OAAAC,EAAA,EAAAD,CAAAiE,EAAA,GAahBnD,EAbgBoD,EAAA,GAaD7C,EAbC6C,EAAA,GAejBnD,EAAU,CACZoD,MAAO,QACPC,QAAS,UACTC,oBAAqB,sBACrBP,KAAM,QAnBaQ,EAqBqBxE,mBAAS,GArB9ByE,EAAAvE,OAAAC,EAAA,EAAAD,CAAAsE,EAAA,GAqBhBtD,EArBgBuD,EAAA,GAqBAjD,EArBAiD,EAAA,GAAAC,EAsBW1E,qBAtBX2E,EAAAzE,OAAAC,EAAA,EAAAD,CAAAwE,EAAA,GAsBhBvD,EAtBgBwD,EAAA,GAsBLlD,EAtBKkD,EAAA,GAyBjBC,EAAO/B,IAqBPgC,EAAqB,WAAyB,IAAxBC,EAAwBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjBnE,EAC/B,OAAO6C,EAAQf,UAAUwC,OAAOJ,IAK9BK,EAAmB,WAAyB,IAAxBL,EAAwBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjBnE,EAC7B,OAAO6C,EAAQb,QAAQsC,OAAOJ,IAgB5BM,EAAqB,SAACC,GAAgC,IAAxBP,EAAwBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjBnE,EACjC0E,EAAS,GAAAC,OAAMF,GACrB,OAAO5B,EAAQf,UAAU8C,IAAIF,EAAWR,IAEtCW,EAAwB,SAACJ,GAAgC,IAAxBP,EAAwBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjBnE,EAC1C,GAA6B,MAAzB6C,EAAQpB,OAAOyC,IACQ,MAAvBrB,EAAQlB,KAAKuC,GACb,OAAO,KAEP,IAAMQ,EAAS,GAAAC,OAAMF,GACrB5B,EAAQnB,WAAWwC,GAAMY,SAASJ,GAC9B7B,EAAQd,aAAauC,OAAOI,EAAWR,GACvCrB,EAAQd,aAAa6C,IAAIF,EAAWR,IAG1Ca,EAAmB,SAACN,GAAgC,IAAxBP,EAAwBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjBnE,EAC/B0E,EAAS,GAAAC,OAAMF,GACrB,MAA6B,MAAzB5B,EAAQpB,OAAOyC,GACR,KAMPrB,EAAQlB,KAAKqD,OAAO,SAACC,EAAKC,EAAKC,GAC3B,QAAOF,GACFC,IAAQrC,EAAQtB,OAAO4D,KAE7B,IAEHtE,EAAaqD,GACNrB,EAAQb,QAAQ4C,IAAIF,EAAWR,IAG/BrB,EAAQb,QAAQ4C,IAAIF,EAAWR,IAoH9C,OACI1E,EAAAC,EAAAC,cAAC0F,EAAYxF,SAAb,CAAsBC,MAAS,CAEvBG,aAAcA,EACdC,YAAaA,EACbC,QAASA,EACTC,eAAgBA,EAChBC,cAAeA,EACfC,QAASA,EACTC,eAAgBA,EAChBC,UAAWA,EAEXC,gBAAiBA,EACjBC,eAAgBA,EAChBC,kBA5Ma,WAIhB,IAHL2E,EAGKlB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAHK,GACVjC,EAEKiC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAFGH,EAAK9B,MACbE,EACK+B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADIH,EAAK5B,OAId,OAGW1B,EAHP0B,EAASF,EAGgBoD,KAAKC,MAAMrD,GAASmD,EAAU,IAE9BC,KAAKC,MAAMnD,EAASiD,KAiMzC1E,iBAAkBA,EAClBC,kBAAmBA,EACnBC,aAAcA,EAEdC,aArLS,SAAA2D,GACjB,OAAQxE,GACJ,KAAKC,EAAQgD,OACT,OAAOsB,EAAmBC,GAC9B,KAAKvE,EAAQiD,WACT,OAAO0B,EAAsBJ,GACjC,KAAKvE,EAAQkD,KACT,OAAO2B,EAAiBN,GAC5B,QACI,SA8KA1D,YAhHQ,WAChB,IAAIyE,EAAsB,EAC1B3C,EAAQpB,OAAOgE,IAAI,SAAC5F,EAAOsF,GACvB,OAAItF,IAAUgD,EAAQrB,SAAS2D,GACpBtF,EAC0B,MAA1BgD,EAAQpB,OAAO0D,IACtBK,IACAjB,EAAiBY,GACVlB,EAAmBkB,IAEnB,OAGfvE,EAAkB4E,GAClB7E,EAAiBN,EAAQoD,QAmGjBzC,iBArHa,WACrBwD,EAAmB3B,EAAQrB,SAASxB,KAqH5BiB,iBApIa,WACrB,MAAqC,MAAjC4B,EAAQpB,OAAOzB,IACfiE,IAIOM,KAC+B,MAA/B1B,EAAQlB,KAAK3B,GACbuE,IAC+B,MAA/B1B,EAAQlB,KAAK3B,GAtEG,WAAyB,IAAxBkE,EAAwBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjBnE,EACnC6C,EAAQd,aAAa2D,QAAQxB,GAsElByB,QADJ,GA4HCzE,cAlGU,WAClB2B,EAAQtB,OAAOkE,IAAI,SAAC5F,EAAOsF,GAGvB,OAFAtC,EAAQd,aAAa2D,QAAQP,GAC7BtC,EAAQb,QAAQsC,OAAOa,GAChBX,EAAmB3E,EAAOsF,MA+F7BhE,yBAzFqB,WAC7B0B,EAAQpB,OAAOgE,IAAI,SAAC5F,EAAOsF,GAEvB,MAAc,MAAVtF,EADmB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAEtC4F,IAAI,SAAAG,GACtB,OAAI/C,EAAQnB,WAAWyD,GAAOL,SAASc,GAC5B,KAEAf,EAAsBe,EAAKT,KAInC,QA+EP/D,WAzEO,WAEfyB,EAAQtB,OAAOkE,IAAI,SAAC5F,EAAOsF,GACvB,OAAItF,IAAUgD,EAAQlB,KAAKwD,GAChB,KACwB,MAAxBtC,EAAQlB,KAAKwD,GACbZ,EAAiBY,GAEjB,OAGftE,EAAa,MACbF,EAAiB,OA8DTU,oBA5DgB,WACxBwB,EAAQd,aAAauC,OACjBzB,EAAQlB,KAAKpB,GAAYA,GAE7BsC,EAAQtB,OAAOkE,IAAI,SAAC5F,EAAOsF,GACvB,OAAItF,IAAUgD,EAAQlB,KAAKwD,GAChB,KACwB,MAAxBtC,EAAQlB,KAAKwD,GACbZ,EAAiBY,GAEjB,OAGftE,EAAa,MACbF,EAAiB,OA+CTW,aA7CS,WAEjBuB,EAAQlB,KAAK8D,IAAI,SAAC5F,EAAOsF,GACrB,OAAItF,IAAUgD,EAAQpB,OAAO0D,GAClB,KACU,MAAVtF,GACP0E,EAAiBY,GACVX,EAAmB3E,EAAOsF,IAE1B,OAGftE,EAAa,MACbF,EAAiB,SAkCZzB,EAAMa,iECnOJ8F,EA5BSC,YAAW,CAC/BC,OAAQ,CACJ3D,OAAQ,QAEZ4D,OAAQ,CACJC,gBAAiBlK,IAAUe,eAC3BsF,OAAQ,QACRF,MAAO,SAEXgE,WAAY,CACRvH,MAAO5C,IAAUG,cACjBiK,eAAgB,OAEhBC,wBAAyB,CACrBzH,MAAO5C,IAAUG,gBAGzBmK,iBAAkB,CACd1H,MAAO5C,IAAU4B,cACjBwI,eAAgB,OAEhBC,wBAAyB,CACrBzH,MAAO5C,IAAU4B,kBC8Bd2I,EAnCA,WAEX,IAAMC,EAAgBzD,qBAAW0D,GAG3BC,EAASZ,IAGf,OACIrG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAAQC,SAAW,SAASC,UAAaH,EAAOV,QAC5CvG,EAAAC,EAAAC,cAACmH,EAAA,EAAD,KACIrH,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CACIC,KAAK,QACLpI,MAAM,UACNqI,aAAW,OACXC,QAAW,kBAAMV,EAAcvH,iBAAgB,KAE/CQ,EAAAC,EAAAC,cAACwH,EAAA,EAAD,SAKZ1H,EAAAC,EAAAC,cAACyH,EAAA,EAAD,CACIC,OAAS,OACTC,KAAQd,EAAcxH,aACtBuI,OAAU,kBAAMf,EAAcvH,iBAAgB,IAC9CuI,QAAW,kBAAMhB,EAAcvH,iBAAgB,KAE/CQ,EAAAC,EAAAC,cAAC8H,EAAD,CAAQf,OAAUA,+ECgFnBgB,EAxGM,SAAAvI,GAEjB,IAAMqH,EAAgBzD,qBAAW0D,GAG3BC,EAASvH,EAAMuH,OAIfiB,EAAY,SAAAC,GACd,OAAQpB,EAAczH,eAAiB6I,EAAQlB,EAAOJ,iBACtDI,EAAOP,YAIX,OACI1G,EAAAC,EAAAC,cAAA,OAAKkH,UAAaH,EAAOT,QAGrBxG,EAAAC,EAAAC,cAACkI,EAAA,EAAD,KAEIpI,EAAAC,EAAAC,cAACmI,EAAA,EAAD,CAAMC,GAAK,SAASlB,UAAaH,EAAOP,YACpC1G,EAAAC,EAAAC,cAACqI,EAAA,EAAD,CACIC,QAAU,EACVpB,UAAS,GAAAjC,OAAO+C,EAAU,UAAjB,KAAA/C,OAA8B+C,EAAU,MACjDT,QAAW,WACPV,EAAcvH,iBAAgB,KAKlCQ,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CAAcrB,UAAS,GAAAjC,OAAO+C,EAAU,UAAjB,mCAAA/C,OACjB+C,EAAU,OAEZlI,EAAAC,EAAAC,cAACwI,EAAA,EAAD,OAGJ1I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAc3L,QAAU,YAKhCgD,EAAAC,EAAAC,cAACmI,EAAA,EAAD,CAAMC,GAAK,QAAQlB,UAAaH,EAAOP,YACnC1G,EAAAC,EAAAC,cAACqI,EAAA,EAAD,CACIC,QAAU,EACVpB,UAAac,EAAU,SACvBT,QAAW,WACPV,EAAcvH,iBAAgB,KAKlCQ,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CAAcrB,UAAac,EAAU,UACjClI,EAAAC,EAAAC,cAAC0I,EAAA,EAAD,OAGJ5I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAc3L,QAAU,kBAKhCgD,EAAAC,EAAAC,cAACmI,EAAA,EAAD,CAAMC,GAAK,OAAOlB,UAAaH,EAAOP,YAClC1G,EAAAC,EAAAC,cAACqI,EAAA,EAAD,CACIC,QAAU,EACVpB,UAAac,EAAU,QACvBT,QAAW,WACPV,EAAcvH,iBAAgB,KAKlCQ,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CAAcrB,UAAac,EAAU,SACjClI,EAAAC,EAAAC,cAAC2I,EAAA,EAAD,OAGJ7I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAc3L,QAAU,iBAKhCgD,EAAAC,EAAAC,cAACmI,EAAA,EAAD,CAAMC,GAAK,gBAAgBlB,UAAaH,EAAOP,YAC3C1G,EAAAC,EAAAC,cAACqI,EAAA,EAAD,CACIC,QAAU,EACVpB,UAAac,EAAU,iBACvBT,QAAW,WACPV,EAAcvH,iBAAgB,KAKlCQ,EAAAC,EAAAC,cAACuI,EAAA,EAAD,CAAcrB,UAAac,EAAU,kBACjClI,EAAAC,EAAAC,cAAC4I,EAAA,EAAD,OAGJ9I,EAAAC,EAAAC,cAACyI,EAAA,EAAD,CAAc3L,QAAU,8BClGjC+L,EAfM,WACjB,IAAM1F,EAAUC,qBAAWC,GAK3B,OACIvD,EAAAC,EAAAC,cAAA,0BAEKmD,EAAQtB,iCCPNiH,EAfO,WAWlB,OATalJ,OAAOmJ,KAAPnJ,OAAAoJ,EAAA,EAAApJ,CAAA,GAAgBqJ,eAAe3D,OAAO,SAACC,EAAKC,GAGrD,OAAiC,IAA1BA,EAAI0D,MAAM,KAAKxE,OAAf,GAAAO,OAAArF,OAAAuJ,EAAA,EAAAvJ,CAAkC2F,GAAlC,CAAuCC,IAAOD,GACtD,IAEsBQ,IAAI,SAAAqD,GACzB,OAAOC,KAAKC,MAAML,aAAaM,QAAQH,OCwEhCI,EArEO,SAAAC,GAElB,IAAMtG,EAAUC,qBAAWC,GAG3B,GAAoB,OAAhBoG,EAAJ,CAMA,IAAM5H,EAAS4H,EAAY5H,OACrBC,EAAW2H,EAAY3H,SACvBC,EAAS0H,EAAY1H,OACrBC,EAAayH,EAAYzH,WACzBC,EAAOwH,EAAYxH,KAKzB,OAGIkB,EAAQrB,WAAaA,GACrBqB,EAAQtB,SAAWA,GACnBsB,EAAQpB,SAAWA,GAEC,KAApBD,EAAS4C,QACS,KAAlB7C,EAAO6C,QACW,KAAlB3C,EAAO2C,QACe,KAAtB1C,EAAW0C,QACK,KAAhBzC,EAAKyC,YAKL,GAGAvB,EAAQhB,YAAYL,GACpBqB,EAAQjB,UAAUL,GAClBE,EAAOgE,IAAI,SAAC5F,EAAOsF,GAGf,OAAOtC,EAAQf,UAAU8C,IAAI/E,EAAOsF,KAGxCtC,EAAQd,aAAaqH,UAErB1H,EAAW+D,IAAI,WACX,OAAO5C,EAAQd,aAAa6C,IAAI,MAEpClD,EAAW+D,IAAI,SAAC4D,EAAgBlE,GAC5B,OAAOkE,EAAe5D,IAAI,SAAA6D,GAItB,OAAOzG,EAAQd,aAAa6C,IAAI0E,EAAWnE,OAGnDxD,EAAK8D,IAAI,SAAC5F,EAAOsF,GAEb,OAAOtC,EAAQb,QAAQ4C,IAAI/E,EAAOsF,KAE/BtC,KC7DA0G,EAbE,SAAApE,GACb,IAAMP,EAAM,SAAA4E,GAAQ,OAAI,SAAA5D,GAAG,OAAI4D,EAAS/D,IAAI,SAAA5F,GAAK,OAAIA,EAAQ+F,MACvD6D,EAAU,SAACC,EAAcC,GAAf,OAA6BA,EAAU3E,OACnD,SAACC,EAAKC,GACF,OAAOD,EAAIN,OAAOO,IACnBwE,IACDE,EAAO,CAAC,EAAE,EAAE,GACZC,EAAWJ,EAAQG,EAAMA,EAAKnE,IAAIb,EAAI,CAAC,EAAG,OAEhD,OADiB6E,EAAQI,EAAUA,EAASpE,IAAIb,EAAI,CAAC,EAAG,GAAI,GAAI,OAChDE,SAASK,IC0Gd2E,EAzFI,SAAA5K,GAAS,IAAAC,EAEgBC,mBAAS,MAFzBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEjB4K,EAFiB1K,EAAA,GAEH2K,EAFG3K,EAAA,GAGlB4K,EAAezB,IAGf/B,EAASvH,EAAMuH,OA6DrB,OA1DAyC,EAAca,GAIEE,EAAaxE,IAAI,SAAC0D,EAAahE,GAsC3C,IAjCA,IAAM+E,EAAef,EAAY5H,OAAOkE,IAAI,SAACvB,EAAMiB,GAC/C,MAAa,MAATjB,GAA8C,MAA9BiF,EAAY1H,OAAO0D,GAE/B3F,EAAAC,EAAAC,cAAA,OAAKoJ,IAAO3D,EAAOyB,UAAS,iCAAAjC,OAClB8B,EAAOhF,OADW,mCAAAkD,OAElB4E,EAASpE,GAASsB,EAAOhK,MAAQgK,EAAO5J,KAFtB,2BAIvBsM,EAAY1H,OAAO0D,IAGjB,MAATjB,EAEE1E,EAAAC,EAAAC,cAAA,OAAKoJ,IAAO3D,EAAOyB,UAAS,iCAAAjC,OAClB8B,EAAO6C,UADW,mCAAA3E,OAElB4E,EAASpE,GAASsB,EAAOhK,MAAQgK,EAAO5J,KAFtB,2BAIvBsM,EAAYzH,WAAWyD,GAAOgF,KAAK,MAKxC3K,EAAAC,EAAAC,cAAA,OAAMoJ,IAAO3D,EAAOyB,UAAS,6BAAAjC,OACvB8B,EAAOlF,OADgB,+BAAAoD,OAEvB4E,EAASpE,GAASsB,EAAOhK,MAAQgK,EAAO5J,KAFjB,2BAIxBqH,KAOXkG,EAAO,GACJC,EAAQ,EAAGA,EAAQ,EAAGA,IAC3BD,EAAKE,KACD9K,EAAAC,EAAAC,cAAA,OAAKoJ,IAAOuB,EAAOzD,UAAaH,EAAO8D,KAClCL,EAAaM,OAAO,EAAE,KASnC,OAJIhL,EAAAC,EAAAC,cAAA,OAAKoJ,IAAO3D,EAAOyB,UAAaH,EAAOgE,MACpCL,KAQC3E,IAAI,SAAClE,EAAQ4D,GACjB,OACI3F,EAAAC,EAAAC,cAACgL,EAAA,EAAD,CAAO5B,IAAO3D,GACV3F,EAAAC,EAAAC,cAACmI,EAAA,EAAD,CAAMC,GAAK,SAAS6C,YAAe,WAG/BX,EAAgBC,EAAa9E,MAHjC,QAQA3F,EAAAC,EAAAC,cAAA,WACK6B,yBCtGnBqJ,EAAa,oEASbC,EAAS,WAA4C,IAA3CC,EAA2C3G,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1B,GAAI4G,EAAsB5G,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAGhD,GAAuB,KAAnB2G,GAA0C,KAAjBC,EAA7B,CAGA,IAAMC,EAAeC,GAAOH,GAa5B,OAZmBG,GAAOF,GAEOtF,IAAI,SAAA8E,GACjC,OAAOA,EAAI3B,MAAM,IAAI5D,OAAO,SAACC,EAAKC,EAAKC,GAKnC,MAAe,MAARD,EAAcD,EAAMA,GAAOE,EAAQ,IAC3C,MAGcM,IAAI,SAAC5F,EAAOsF,GAK7B,MAAO,CAAC+F,GAAaF,EAAa7F,IAAU+F,GAAarL,MAC1DmF,OAAO,SAACC,EAAKC,GACZ,OAAOD,EAAM,IAAMC,MAIrBiG,GAAS,WAAkB,IAMvBC,GANuBjH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,IAMEyE,MAAM,KAAKnD,IAAI,SAAA4F,GACnC,MAAO,CAACA,EAAQC,MAAM,EAAE,GAAID,EAAQC,MAAM,IAAI7F,IAAI,SAAA8F,GAC9C,OAAOC,GAAaD,OAe5B,MAAO,CAXgBH,EAAQpG,OAAO,SAACC,EAAKC,GACxC,OAAOD,EAAMC,EAAI,IAClB,IAGkBkG,EAAQpG,OAAO,SAACC,EAAKC,GACtC,OAAOD,EAAMC,EAAI,GAAGuG,WAAW7C,MAAM,IAAInD,IAAI,SAAC5F,EAAOsF,GACjD,OAAOD,EAAI,GAAGuG,WAAW7C,MAAM,IAAI9D,UAC9BK,EAAQ,GAAGsG,YAAc5L,EAAQ,IACvCsK,KAAK,KACT,MAIDe,GAAe,SAAfA,EAAgBQ,GAA0C,IAAjCC,EAAiCxH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAxB,GAAIyH,EAAoBzH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAT,KAEnD,IAAKuH,EACD,OAAOC,EACT,GAAgB,MAAZC,EAEF,OAAOV,EAAcQ,EAASC,EAAQE,GAAaH,IAEnD,IAAMI,EAAKxG,KAAAyG,IAAG,GAAMH,GACdI,EAAsB1G,KAAKC,MAC7BmG,EAAUI,GAId,OAAOZ,EACHQ,EAAWM,EAAsBF,EACjCH,EAASf,EAAWoB,GACpBJ,EAAW,IAKjBJ,GAAe,SAAfA,EAAgBG,GAAyC,IAAjCD,EAAiCvH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvB,EAAGyH,EAAoBzH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAT,KAClD,GAAe,KAAXwH,EACA,OAAOD,EACT,GAAgB,MAAZE,EAEF,OAAOJ,EAAcG,EAAQD,EAASC,EAAOvH,OAAS,GAEtD,IAAM0H,EAAKxG,KAAAyG,IAAG,GAAMH,GACdI,EAAsBpB,EAAWqB,QAAQN,EAAO,IAGtD,OAAOH,EACHG,EAAOL,MAAM,GACbI,EAAWM,EAAsBF,EACjCF,EAAW,IAOjBX,GAAS,SAATA,EAAUiB,GAAuC,IAA/BC,EAA+BhI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAnB,EAAGiI,EAAgBjI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC5C,OAAsB,IAAlB+H,EAAO9H,OACAgI,GAEPA,EAAO9B,KAAK4B,EAAOZ,MAAM,EAAGa,IACrBlB,EACHiB,EAAOZ,MAAMa,GACbA,EACAC,KAONP,GAAe,SAACpH,GAAsB,IAAd4H,EAAclI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACjC,OAAOmB,KAAKC,MACRD,KAAKjK,IAAIoJ,GAAUa,KAAKjK,IAAIgR,KCjCrBC,GAhFG,WAAM,IAAAnN,EAEYC,mBAAS,IAFrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEbqC,EAFanC,EAAA,GAEHwC,EAFGxC,EAAA,GAAA2D,EAGQ5D,mBAAS,IAHjB6D,EAAA3D,OAAAC,EAAA,EAAAD,CAAA0D,EAAA,GAGbzB,EAHa0B,EAAA,GAGLrB,EAHKqB,EAAA,GAOdnC,EAAe,SAAAyL,GAAK,OAAI,SAAAC,GAC1B,OAAQD,GACJ,IAJS,WAKL,OAAO1K,EAAY2K,EAAMC,OAAO5M,OACpC,IALO,SAMH,OAAO+B,EAAU4K,EAAMC,OAAO5M,OAClC,QACI,UAINuM,EAAS,SAAC5K,EAAUD,GACtB,MAAiB,KAAbC,GAA8B,KAAXD,EACZsJ,EAAOrJ,EAAUD,QAGxB,GA4BR,OACI/B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMkH,UAAW,OAAQ8F,YAAU,EAACC,aAAa,OAC7CnN,EAAAC,EAAAC,cAACkN,EAAA,EAAD,CACIhG,UAAa,OACbiG,MAAQ,WACRC,SAAYhM,EApDX,YAqDDiM,OAAS,SACTC,KAAO,SACPC,QAAU,aAEdzN,EAAAC,EAAAC,cAACkN,EAAA,EAAD,CACIhG,UAAa,OACbiG,MAAQ,SACRC,SAAYhM,EA3Db,UA4DCiM,OAAS,SACTC,KAAO,SACPC,QAAU,cAGjBb,EAAO5K,EAAUD,GAClB/B,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CAAQtG,UAAa,OAAQK,QAAW,kBA7C5B,SAAAkG,GAChB,IAAM5L,EAAS4J,GAAOgC,GAAiB,GAAGvE,MAAM,IAC1CpH,EAAW2J,GAAOgC,GAAiB,GAAGvE,MAAM,IAC5CnH,EAASF,EACTG,EAAaH,EAAOkE,IAAI,iBAAM,KAC9B2H,EAAgBD,EAKtB,OAAOxE,aAAa0E,QAAQF,EAAiBpE,KAAKuE,UAAU,CAExD/L,OAAQA,EACRC,SAAUA,EACVC,OAAQA,EACRC,WAAYA,EACZyL,gBAAiBA,EACjBC,cAAeA,EACfG,WAAY,IAAIC,QA2B8BC,CAAYrB,EAAO5K,EAAUD,MAA3E,oBCnFCmM,GAAe,SAACvI,EAAOwI,EAAUpM,GA4B1C,OARsB,SAAhBqM,EAAgBhI,GAClB,IAAMiI,EAnBQ,SAAAjI,GACd,OAAQ+H,GACJ,IARc,aASV,OAAO/H,EAAM,IAAM,EAAIA,EAAM,EAAIA,EAAM,EAC3C,IATgB,eAUZ,OAAOA,EAAM,IAAM,EAAIA,EAAM,EAAIA,EAAM,EAG3C,IAXiB,gBAYb,OAAOA,EAAM,EAAI,EAAIA,EAAM,GAAKA,EAAM,EAC1C,IAdmB,kBAef,OAAOA,EAAM,GAAK,EAAIA,EAAM,GAAKA,EAAM,EAC3C,QACI,QAMUkI,CAAUlI,GAC5B,MAA0B,MAAtBrE,EAAOsM,GACAA,EAEAD,EAAcC,GAGtBD,CAAczI,ICkHV4I,GA5HK,WAEhB,IAAMlL,EAAUC,qBAAWC,GACrBiL,EAAclL,qBAAWmL,GAG/BxL,oBAAU,WAKN,IAAMyL,EACFC,aAAUC,SAAU,YAAYC,UAAU,SAAA7B,GACtCA,EAAM8B,2BAGN,IAAMC,EAAS/B,EAAM1D,IAAI0F,cACnBrJ,EAAQ6I,EAAYhO,aAG1B,GAAIgO,EAAY5N,gBAAkB4N,EAAY3N,QAAQ+C,KAClD,OAAQmL,GACJ,IAAK,IACD,OAAOP,EAAY5M,aACvB,IAAK,IACD,OAAO4M,EAAY3M,sBACvB,IAAK,IACD,OAAO2M,EAAY1M,eACvB,QACI,WAKP,IAAkC,OAA9B0M,EAAY5N,cACb,OAEJ,OAAQmO,GAEJ,IAAK,IACD,OAAOP,EAAYxN,gBAAgBkN,GAC/BvI,ED5DH,gBC8DGtC,EAAQtB,SAEhB,IAAK,IACD,OAAOyM,EAAYxN,gBAAgBkN,GAC/BvI,EDrEN,aCuEMtC,EAAQtB,SAEhB,IAAK,IACD,OAAOyM,EAAYxN,gBAAgBkN,GAC/BvI,EDzED,kBC2ECtC,EAAQtB,SAEhB,IAAK,IACD,OAAOyM,EAAYxN,gBAAgBkN,GAC/BvI,EDhFJ,eCkFItC,EAAQtB,SAGhB,IAAK,IAEL,IAAK,IACD,OAAOyM,EAAY/M,mBACvB,IAAK,IACD,OAAO+M,EAAYhN,mBACvB,IAAK,IACD,OAAOgN,EAAYjN,cACvB,IAAK,IAKD,OAAOiN,EAAYrN,iBACfqN,EAAY3N,QAAQqD,SAC5B,IAAK,IAKD,OAAOsK,EAAYrN,iBACfqN,EAAY3N,QAAQsD,qBAE5B,IAAK,IACD,OAAOqK,EAAYvN,eACfuN,EAAY9N,QAAQgD,QAC5B,IAAK,IACD,OAAO8K,EAAYvN,eACfuN,EAAY9N,QAAQiD,YAC5B,IAAK,IAID,OAAO6K,EAAY/N,cACnB+N,EAAY9N,QAAQkD,KAChB4K,EAAYrN,iBACRqN,EAAY3N,QAAQ+C,MACxB4K,EAAYvN,eACRuN,EAAY9N,QAAQkD,MAEhC,QAII,OAAO4K,EAAYlN,aAAa0L,EAAM1D,SAI1D,OAAO,WACHoF,EAASO,gBAGd,CACCT,EAAYhO,aAAcgO,EAAY/N,YACtC+N,EAAY5N,cAAeyC,EAAQpB,OAAQoB,EAAQnB,WACnDmB,EAAQlB,QCnFD+M,GAjCK,SAAAxP,GAIhB,IAAMuH,EAASvH,EAAMuH,OAMrB,OAHAsH,KAIIvO,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACgL,EAAA,EAAD,CAAO9D,UAAaH,EAAOkI,iBAEvBnP,EAAAC,EAAAC,cAACkP,GAAD,CAAmBnI,OAAUA,IAC7BjH,EAAAC,EAAAC,cAACmP,GAAD,CAAapI,OAAUA,IACvBjH,EAAAC,EAAAC,cAACoP,GAAD,CAAerI,OAAUA,IACzBjH,EAAAC,EAAAC,cAACqP,GAAD,CAAgBtI,OAAUA,IAC1BjH,EAAAC,EAAAC,cAACsP,GAAD,CAAYvI,OAAUA,IAEtBjH,EAAAC,EAAAC,cAACuP,GAAD,CAAexI,OAAUA,IAEzBjH,EAAAC,EAAAC,cAACwP,GAAD,CAAYzI,OAAUA,IAEtBjH,EAAAC,EAAAC,cAACyP,GAAD,CAAgB1I,OAAUA,OC2C3B2I,GAzFI,CACf3N,OAAQ,SAAAvC,GAAK,MAAK,CACdP,MAAO5C,IAAUG,cAGjB0C,SAAQ,GAAA+F,OAAKzF,EAAMiB,eAAiB,IAA5B,MACRkP,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAM,eAAA7K,OAAiB5I,IAAUG,eACjC6Q,OAAQ,MACR0C,UAAW,aACXxR,QAASiB,EAAMiB,eAAiB,GAChC+B,MAAOhD,EAAMiB,eACbiC,OAAQlD,EAAMiB,iBAElBmJ,UAAW,SAAApK,GAAK,MAAK,CACjBP,MAAO5C,IAAUG,cAGjB0C,SAAQ,GAAA+F,OAAKzF,EAAMiB,eAAiB,EAA5B,MACRuP,WAAU,GAAA/K,OAAKzF,EAAMiB,eAAiB,KAA5B,MACVwP,cAAa,GAAAhL,OAAKzF,EAAMiB,eAAiB,GAA5B,MACbkP,QAAS,OACTO,SAAU,OACVN,eAAgB,SAChBC,WAAY,SACZC,OAAM,eAAA7K,OAAiB5I,IAAUG,eACjC6Q,OAAQ,MACR0C,UAAW,aACXxR,QAASiB,EAAMiB,eAAiB,GAChC+B,MAAOhD,EAAMiB,eACbiC,OAAQlD,EAAMiB,iBAElBoB,OAAQ,SAAArC,GAAK,MAAK,CACdP,MAAO5C,IAAU8T,cAGjBjR,SAAQ,GAAA+F,OAAKzF,EAAMiB,eAAiB,IAA5B,MACRkP,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAM,eAAA7K,OAAiB5I,IAAUG,eACjC6Q,OAAQ,MACR0C,UAAW,aACXxR,QAASiB,EAAMiB,eAAiB,GAChC+B,MAAOhD,EAAMiB,eACbiC,OAAQlD,EAAMiB,iBAElBwB,KAAM,SAAAzC,GAAK,MAAK,CAGZN,SAAQ,GAAA+F,OAAKzF,EAAMiB,eAAiB,IAA5B,MACRkP,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAM,eAAA7K,OAAiB5I,IAAUG,eACjC6Q,OAAQ,MACR0C,UAAW,aACXxR,QAASiB,EAAMiB,eAAiB,GAChC+B,MAAOhD,EAAMiB,eACbiC,OAAQlD,EAAMiB,iBAElB2P,MAAO,CACHnR,MAAO5C,IAAUgU,eAErBC,UAAW,CACPrR,MAAO5C,IAAUkU,iBAErB1F,IAAK,SAAArL,GAAK,MAAK,CACXmQ,QAAS,OACTa,cAAe,MACfZ,eAAgB,SAChBC,WAAY,SACZrN,MAA8B,GAAvBhD,EAAMiB,eACbiC,OAAQlD,EAAMiB,iBAElB1D,MAAO,CACHwJ,gBAAiBlK,IAAUoU,eAE/BtT,KAAM,CACFoJ,gBAAiBlK,IAAUqU,eAE/BC,SAAU,CACNpK,gBAAiBlK,IAAUM,gBCjBpBiU,GAlEM,CAEjBC,YAAa,CACTC,4BAA6B,CACzB7R,MAAO5C,IAAUG,cACjB+J,gBAAiBlK,IAAU0U,eAE/BC,8BAA+B,CAC3BC,gCAAiC,CAC7BhS,MAAO5C,IAAU8B,eAErBoI,gBAAiBlK,IAAU0U,eAE/BG,8BAA+B,CAC3BC,yBAA0B,CACtBlS,MAAO5C,IAAUG,eAErB+J,gBAAiBlK,IAAU0U,gBAKnCK,cAAe,CACXN,4BAA6B,CACzB7R,MAAO5C,IAAUC,eACjBiK,gBAAiBlK,IAAUgV,kBAE/BL,8BAA+B,CAC3BC,gCAAiC,CAC7BhS,MAAO5C,IAAU4B,eAErBsI,gBAAiBlK,IAAUgV,kBAE/BH,8BAA+B,CAC3BC,yBAA0B,CACtBlS,MAAO5C,IAAUC,gBAErBiK,gBAAiBlK,IAAUgV,mBAKnCC,mBAAoB,CAChBR,4BAA6B,CACzB7R,MAAO5C,IAAUC,eACjBiK,gBAAiBlK,IAAUkV,iBAE/BP,8BAA+B,CAC3BC,gCAAiC,CAC7BhS,MAAO5C,IAAU4B,eAErBsI,gBAAiBlK,IAAUkV,iBAE/BL,8BAA+B,CAC3BC,yBAA0B,CACtBlS,MAAO5C,IAAUC,gBAErBiK,gBAAiBlK,IAAUkV,iBAE/BC,OAAQ,CACJvS,MAAO5C,IAAU4B,iBCkCdwT,GArFOrL,YAAWxG,OAAAoJ,EAAA,EAAApJ,CAAA,GAE1B8P,GACAkB,GAHyB,CAK5B3T,KAAM,SAAAuC,GAAK,MAAK,CAGZjB,QAAO,GAAA0G,OAAKzF,EAAMiB,eAAiB,EAA5B,qBAAAwE,OACDzF,EAAMiB,eAAiB,EADtB,MAEP4M,OAAQ,OACRuC,eAAgB,WAEpBX,gBAAiB,SAAAzP,GAAK,MAAK,CACvBmQ,QAAS,OACTpJ,gBAAiBlK,IAAUqV,gBAC3BhP,OAA+B,GAAvBlD,EAAMiB,eACd+B,MAA8B,GAAvBhD,EAAMiB,eACbkR,WAAY,gBACZtE,OAAQ,OACRuE,oBAAqB,gBACrBC,iBAAkB,kBAClBC,cAAe,KACfC,WAAY,KACZC,kBAAiB,2OAUrBC,YAAa,SAAAzS,GAAK,MAAK,CACnB0S,WAAY,CACRjT,MAAO5C,IAAU8V,cACjB5L,gBAAiBlK,IAAUmB,gBAG3B0B,SAAQ,GAAA+F,OAAKzF,EAAMiB,eAAiB,IAA5B,MACR+B,MAAOhD,EAAMiB,eACbiC,OAAQlD,EAAMiB,gBAGlB2R,wBAAyB,CACrBnT,MAAO5C,IAAUgW,cACjB9L,gBAAiBlK,IAAUoB,kBAE/B6U,8BAA+B,CAC3BrT,MAAO5C,IAAUgW,cACjB9L,gBAAiBlK,IAAUoB,kBAE/B8U,iBAAkB,CACdtT,MAAO5C,IAAUG,cACjB+J,gBAAiBlK,IAAUmW,mBAKnCC,eAAgB,SAAAjT,GAAK,MAAK,CACtBkT,SAAU,WAEdC,kBAAmB,SAAAnT,GAAK,MAAK,CACzBkT,SAAU,cAEdE,cAAe,SAAApT,GAAK,MAAK,CACrBkT,SAAU,UAIdG,OAAQ,SAAArT,GAAK,MAAK,CACdkT,SAAU,WAEdI,OAAQ,SAAAtT,GAAK,MAAK,CACdmQ,QAAS,OACTC,eAAgB,SAChBmD,aAAc,SACd7C,SAAU,OACV3R,QAAS,SACTiE,MAA8B,EAAvBhD,EAAMiB,oBCXNuS,GAtDF,WAET,IAAM1E,EAAclL,qBAAWmL,GAIzBxH,EAAS0K,GAAc,CACzBhR,eAAgB6N,EAAY7N,iBAM1B6D,EAAO/B,IAKb,OAJAQ,oBAAU,WACNuL,EAAYtN,qBACb,CAACsN,EAAahK,IAGbxE,EAAAC,EAAAC,cAAA,OAAKkH,UAAaH,EAAO9J,MAErB6C,EAAAC,EAAAC,cAACiT,EAAA,EAAD,KAOInT,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOC,OAAK,EAACjL,KAAO,KAChBnI,EAAAC,EAAAC,cAACmT,GAAD,CAAapM,OAAUA,KAG3BjH,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOhL,KAAO,UACVnI,EAAAC,EAAAC,cAACmT,GAAD,CAAapM,OAAUA,KAG3BjH,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOhL,KAAO,iBACVnI,EAAAC,EAAAC,cAACoT,EAAD,CAAcrM,OAAUA,KAG5BjH,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOhL,KAAO,SACVnI,EAAAC,EAAAC,cAACqT,EAAD,CAAYtM,OAAUA,KAG1BjH,EAAAC,EAAAC,cAACiT,EAAA,EAAD,CAAOhL,KAAO,QACVnI,EAAAC,EAAAC,cAACsT,GAAD,CAAWvM,OAAUA,oECI1BwM,GAtDO,SAAA/T,GAElB,IAAM8O,EAAclL,qBAAWmL,GAGzBxH,EAASvH,EAAMuH,OAGrB,OACIjH,EAAAC,EAAAC,cAACwT,GAAA,EAAD,CACIrT,MAASmO,EAAY/N,YACrB6M,SAAY,SAACN,EAAO2G,GAGhB,GAAe,OAAXA,GACAnF,EAAY/N,cAAgB+N,EAAY9N,QAAQkD,KAIhD4K,EAAYrN,iBAAiBqN,EAAY3N,QAAQ+C,UAC9C,IAAe,OAAX+P,EACP,OAEAnF,EAAYvN,eAAe0S,KAGnCC,WAAS,EACTpP,KAAO,QACP4C,UAAS,GAAAjC,OAAO8B,EAAOkL,YAAd,KAAAhN,OAA6B8B,EAAO6L,gBAG7C9S,EAAAC,EAAAC,cAAC2T,GAAA,EAAD,CAAexT,MAASmO,EAAY9N,QAAQgD,QACxC1D,EAAAC,EAAAC,cAAC4T,GAAA,EAAD,CAASC,MAAQ,sBACb/T,EAAAC,EAAAC,cAAC8T,GAAA,EAAD,QAIRhU,EAAAC,EAAAC,cAAC2T,GAAA,EAAD,CAAcxT,MAASmO,EAAY9N,QAAQiD,YACvC3D,EAAAC,EAAAC,cAAC4T,GAAA,EAAD,CAASC,MAAQ,yBACb/T,EAAAC,EAAAC,cAAC+T,GAAA,EAAD,QAIRjU,EAAAC,EAAAC,cAAC2T,GAAA,EAAD,CAAcxT,MAASmO,EAAY9N,QAAQkD,MACvC5D,EAAAC,EAAAC,cAAC4T,GAAA,EAAD,CAASC,MAAQ,wBACb/T,EAAAC,EAAAC,cAACgU,GAAA,EAAD,UCRLC,GA5CQ,SAAAzU,GAWnB,IATA,IAAM2D,EAAUC,qBAAWC,GACrBiL,EAAclL,qBAAWmL,GAGzBxH,EAASvH,EAAMuH,OAIfmN,EAAU,GAVYC,EAAA,SAWnBpP,GACLmP,EAAQtJ,KACJ9K,EAAAC,EAAAC,cAAC2T,GAAA,EAAD,CACIxT,MAAK,GAAA8E,OAAOF,GACZqE,IAAOrE,EACPwC,QAAW,kBAAM+G,EAAYlN,aAAa2D,KAEzCA,KAPJA,EAAS,EAAGA,EAAS,GAAIA,IAAUoP,EAAnCpP,GAaT,OACIjF,EAAAC,EAAAC,cAACwT,GAAA,EAAD,CACQrT,MACiD,MAA7CgD,EAAQpB,OAAOuM,EAAYhO,cAEoB,MAA3C6C,EAAQlB,KAAKqM,EAAYhO,cACrB6C,EAAQnB,WAAWsM,EAAYhO,cAC/B6C,EAAQlB,KAAKqM,EAAYhO,cAE7B6C,EAAQpB,OAAOuM,EAAYhO,cAEnCgE,KAAO,QACP4C,UAAS,GAAAjC,OAAO8B,EAAOkL,YAAd,KAAAhN,OAA6B8B,EAAO0L,iBAE5CyB,gECmCFE,GAlEW,SAAA5U,GAEtB,IAAM8O,EAAclL,qBAAWmL,GAGzBxH,EAASvH,EAAMuH,OAGrB,OACIjH,EAAAC,EAAAC,cAACqU,GAAA,EAAD,CACI/P,KAAO,QACP4C,UAAS,GAAAjC,OAAO8B,EAAOkL,YAAd,KAAAhN,OAA6B8B,EAAO4L,oBAG7C7S,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CACIjG,QAAW,kBAAM+G,EAAY/M,oBAC7B2F,UAAaH,EAAOuB,QAEpBxI,EAAAC,EAAAC,cAAC4T,GAAA,EAAD,CAASC,MAAQ,qBACb/T,EAAAC,EAAAC,cAACsU,GAAA,EAAD,CAAQpN,UAAaH,EAAOuB,WAIpCxI,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CACIjG,QAAW,kBAAM+G,EAAYhN,oBAC7B4F,UAAaH,EAAOuB,QAEpBxI,EAAAC,EAAAC,cAAC4T,GAAA,EAAD,CAASC,MAAQ,qBACb/T,EAAAC,EAAAC,cAACuU,GAAA,EAAD,QAIRzU,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CACIjG,QAAW,kBAAM+G,EAAYjN,eAC7B6F,UAAaH,EAAOuB,QAEpBxI,EAAAC,EAAAC,cAAC4T,GAAA,EAAD,CAASC,MAAQ,0BACb/T,EAAAC,EAAAC,cAACwU,GAAA,EAAD,QAIR1U,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CACIjG,QAAW,kBAAM+G,EAAYrN,iBACzBqN,EAAY3N,QAAQqD,UACxBkD,UAAaH,EAAOuB,QAEpBxI,EAAAC,EAAAC,cAAC4T,GAAA,EAAD,CAASC,MAAQ,eACb/T,EAAAC,EAAAC,cAACyU,GAAA,EAAD,CAAQvN,UAAaH,EAAOuB,WAIpCxI,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CACIjG,QAAW,kBAAM+G,EAAYrN,iBACzBqN,EAAY3N,QAAQsD,sBACxBiD,UAAaH,EAAOuB,QAEpBxI,EAAAC,EAAAC,cAAC4T,GAAA,EAAD,CAASC,MAAQ,0BACb/T,EAAAC,EAAAC,cAAC0U,GAAA,EAAD,CAAMxN,UAAaH,EAAOuB,aCU/BqM,GAlFe,WAE1B,IAAMxR,EAAUC,qBAAWC,GACrBiL,EAAclL,qBAAWmL,GAMzBzM,EAAWqB,EAAQrB,SACnBD,EAASsB,EAAQtB,OACjBE,EAASoB,EAAQpB,OACjBC,EAAamB,EAAQnB,WAC3B,GAGgC,MAA5BsM,EAAYhO,cACQ,KAApBwB,EAAS4C,QACS,KAAlB7C,EAAO6C,QACW,KAAlB3C,EAAO2C,QACe,KAAtB1C,EAAW0C,QACX5C,IAAaD,EARjB,CAiBI,IAiCM+S,EAAkBzR,EAAQtB,OAAOkE,IAAI,SAAC5F,EAAOsF,GAC/C,MAAiB,MAAVtF,EAAgBsF,EAAQ,OAE7BoP,EAAgBD,EAAgB7O,IApCrB,SAAAN,GAGb,OAAc,OAAVA,EAGO,EAEPA,EAAQ,GAAK,GACbA,EAAQ,GAAK,GACbA,EAAQ,IAAM,GACdA,EAAQ,IAAM,EAEP,EAEPA,EAAQ,GAAK,GACbA,EAAQ,GAAK,GACbA,EAAQ,IAAM,GACdA,EAAQ,IAAM,EAEP,EAEPA,EAAQ,GAAK,GACbA,EAAQ,GAAK,GACbA,EAAQ,IAAM,GACdA,EAAQ,IAAM,EAEP,EAEA,IAQTqP,EAAUlP,KAAKmP,IAALC,MAAApP,KAAIhG,OAAAuJ,EAAA,EAAAvJ,CAAQiV,IAGtBI,EAAoBL,EAAgBtP,OAAO,SAACC,EAAKC,EAAKC,GACxD,OAAOoP,EAAcpP,KAAWqP,EAAzB,GAAA7P,OAAArF,OAAAuJ,EAAA,EAAAvJ,CAAuC2F,GAAvC,CAA4CC,IAAOD,GAC3D,IAEGjF,EAAe2U,EACjBrP,KAAKC,MAAMD,KAAKsP,SAAWD,EAAkBvQ,SAEjD4J,EAAYxN,gBAAgBR,KCoDrB6U,GA1HI,SAAA3V,GAEf,IAAM2D,EAAUC,qBAAWC,GACrBiL,EAAclL,qBAAWmL,GAM/B6G,KAgGA,IA7FA,IAAMrO,EAASvH,EAAMuH,OAQfyD,EAAerH,EAAQtB,OAAOkE,IAAI,SAACvB,EAAMiB,GAG3C,MAAa,MAATjB,GAA0C,MAA1BrB,EAAQpB,OAAO0D,GAE3B3F,EAAAC,EAAAC,cAAA,OACIoJ,IAAO3D,EACPyB,UAAS,6BAAAjC,OACH8B,EAAOhF,OADJ,+BAAAkD,OAEH4E,EAASpE,GAASsB,EAAOhK,MAAQgK,EAAO5J,KAFrC,8BAAA8H,OAIDqJ,EAAYhO,eAAiBmF,EACzBsB,EAAO4J,SACP,KANH,0BASTpJ,QAAW,kBACP+G,EAAYxN,gBAAgB2E,KAG/BtC,EAAQpB,OAAO0D,IAGR,MAATjB,GAAwC,MAAxBrB,EAAQlB,KAAKwD,GAEhC3F,EAAAC,EAAAC,cAAA,OACIoJ,IAAO3D,EACPyB,UAAS,6BAAAjC,OACH8B,EAAO9E,KADJ,8BAAAgD,OAGDqJ,EAAYzN,YAAc4E,EACtBsB,EAAOqJ,MACPrJ,EAAOuJ,UALV,+BAAArL,OAOH4E,EAASpE,GAASsB,EAAOhK,MAAQgK,EAAO5J,KAPrC,8BAAA8H,OASDqJ,EAAYhO,eAAiBmF,EACzBsB,EAAO4J,SACP,KAXH,0BAcTpJ,QAAW,kBACP+G,EAAYxN,gBAAgB2E,KAG/BtC,EAAQlB,KAAKwD,IAGN,MAATjB,EAEH1E,EAAAC,EAAAC,cAAA,OACIoJ,IAAO3D,EACPyB,UAAS,6BAAAjC,OACH8B,EAAO6C,UADJ,+BAAA3E,OAEH4E,EAASpE,GAASsB,EAAOhK,MAAQgK,EAAO5J,KAFrC,8BAAA8H,OAIDqJ,EAAYhO,eAAiBmF,EACzBsB,EAAO4J,SACP,KANH,0BASTpJ,QAAW,kBACP+G,EAAYxN,gBAAgB2E,KAG/BtC,EAAQnB,WAAWyD,GAAOgF,KAAK,MAQpC3K,EAAAC,EAAAC,cAAA,OAAMoJ,IAAO3D,EAAOyB,UAAS,yBAAAjC,OACvB8B,EAAOlF,OADgB,2BAAAoD,OAEvB4E,EAASpE,GAASsB,EAAOhK,MAAQgK,EAAO5J,KAFjB,uBAIxBqH,KAOXkG,EAAO,GACJC,EAAQ,EAAGA,EAAQ,EAAGA,IAC3BD,EAAKE,KACD9K,EAAAC,EAAAC,cAAA,OAAKoJ,IAAOuB,EAAOzD,UAAaH,EAAO8D,KAClCL,EAAaM,OAAO,EAAE,KAMnC,OACIhL,EAAAC,EAAAC,cAAA,OAAKkH,UAAaH,EAAO8L,QACpBnI,sDCvCE2K,GAtEK,SAAA7V,GAEhB,IAoBIkN,EACA4I,EArBEnS,EAAUC,qBAAWC,GACrBiL,EAAclL,qBAAWmL,GAGzBxH,EAASvH,EAAMuH,OAkCrB,YA1BI5D,EAAQpB,OAAOuD,OAAO,SAACC,EAAKC,EAAKC,GAC7B,QAAOF,GACFC,IAAQrC,EAAQrB,SAAS2D,KAE/B,IAOHiH,EAAM,yEACN4I,EAAgBvO,EAAOuK,oBACe,IAA/BhD,EAAY1N,gBACnB8L,EAAM,oHAEN4I,EAAgBvO,EAAOuK,oBACe,IAA/BhD,EAAY1N,gBACnB8L,EAAM,sCACN4I,EAAgBvO,EAAO8J,cAEvBnE,EAAM,GAAAzH,OAAMqJ,EAAY1N,eAAlB,wCACN0U,EAAgBvO,EAAO8J,aAKvB/Q,EAAAC,EAAAC,cAACuV,GAAA,EAAD,CACI5N,KAAQ2G,EAAY5N,gBAAkB4N,EAAY3N,QAAQoD,MAC1DyR,gBAAmB,WAAQlH,EAAYrN,iBAAiB,OACxDwU,SAAW,KACXvO,UAAaoO,GAEbxV,EAAAC,EAAAC,cAAC0V,GAAA,EAAD,eAIA5V,EAAAC,EAAAC,cAAC2V,GAAA,EAAD,KACI7V,EAAAC,EAAAC,cAAC4V,GAAA,EAAD,KACClJ,IAIL5M,EAAAC,EAAAC,cAAC6V,GAAA,EAAD,KACI/V,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CACIjG,QAAW,WAAQ+G,EAAYrN,iBAAiB,OAChD6U,WAAS,GAFb,SCHDC,GAxDO,SAAAvW,GAElB,IAAM8O,EAAclL,qBAAWmL,GAGzBxH,EAASvH,EAAMuH,OAOrB,OACIjH,EAAAC,EAAAC,cAACuV,GAAA,EAAD,CACI5N,KAAQ2G,EAAY5N,gBAChB4N,EAAY3N,QAAQqD,QACxBwR,gBAAmB,WAAQlH,EAAYrN,iBAAiB,OACxDwU,SAAW,KACXvO,UAAaH,EAAO8J,aAEpB/Q,EAAAC,EAAAC,cAAC0V,GAAA,EAAD,sBAIA5V,EAAAC,EAAAC,cAAC2V,GAAA,EAAD,KACI7V,EAAAC,EAAAC,cAAC4V,GAAA,EAAD,2OAQJ9V,EAAAC,EAAAC,cAAC6V,GAAA,EAAD,KACI/V,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CACIjG,QAAW,WAAQ+G,EAAYrN,iBAAiB,OAChDhC,MAAM,WAFV,UAMAa,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CACIjG,QAAW,WACP+G,EAAYrN,iBAAiB,MAC7BqN,EAAY9M,iBAEhBvC,MAAM,UACN6W,WAAS,GANb,SCeDE,GAvDQ,SAAAxW,GAEnB,IAAM8O,EAAclL,qBAAWmL,GAGzBxH,EAASvH,EAAMuH,OAOrB,OACIjH,EAAAC,EAAAC,cAACuV,GAAA,EAAD,CACI5N,KAAQ2G,EAAY5N,gBAChB4N,EAAY3N,QAAQsD,oBACxBuR,gBAAmB,WAAQlH,EAAYrN,iBAAiB,OACxDwU,SAAW,KACXvO,UAAaH,EAAOqK,eAEpBtR,EAAAC,EAAAC,cAAC0V,GAAA,EAAD,sBAIA5V,EAAAC,EAAAC,cAAC2V,GAAA,EAAD,KACI7V,EAAAC,EAAAC,cAAC4V,GAAA,EAAD,kMAOJ9V,EAAAC,EAAAC,cAAC6V,GAAA,EAAD,KACI/V,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CACIjG,QAAW,WAAQ+G,EAAYrN,iBAAiB,OAChDhC,MAAM,WAFV,UAMAa,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CACIjG,QAAW,WACP+G,EAAYrN,iBAAiB,MAC7BqN,EAAY7M,4BAEhBxC,MAAM,UACN6W,WAAS,GANb,SCmDDG,GA1FF,SAAAzW,GAET,IAAM8O,EAAclL,qBAAWmL,GAGzBxH,EAASvH,EAAMuH,OAOrB,OACIjH,EAAAC,EAAAC,cAACuV,GAAA,EAAD,CACI5N,KAAQ2G,EAAY5N,gBAChB4N,EAAY3N,QAAQ+C,KACxB8R,gBAAmB,WAAQlH,EAAYrN,iBAAiB,OACxDwU,SAAW,KACXvO,UAAaH,EAAOuK,oBAEpBxR,EAAAC,EAAAC,cAAC0V,GAAA,EAAD,4BAMA5V,EAAAC,EAAAC,cAAC2V,GAAA,EAAD,KAEI7V,EAAAC,EAAAC,cAAC4V,GAAA,EAAD,oFAKA9V,EAAAC,EAAAC,cAAA,UAEIF,EAAAC,EAAAC,cAAA,8DAIAF,EAAAC,EAAAC,cAAA,yIAMAF,EAAAC,EAAAC,cAAA,kEAMJF,EAAAC,EAAAC,cAAC4V,GAAA,EAAD,0EAOJ9V,EAAAC,EAAAC,cAAC6V,GAAA,EAAD,KACA/V,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CACQjG,QAAW,WAAQ+G,EAAY5M,cAC/BzC,MAAM,WAFd,UAMIa,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CACIjG,QAAW,WAAQ+G,EAAY3M,uBAC/B1C,MAAM,WAFV,UAMAa,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CACIjG,QAAW,WAAQ+G,EAAY1M,gBAC/B3C,MAAM,WAFV,UAMAa,EAAAC,EAAAC,cAACwN,EAAA,EAAD,CACIjG,QAAW,WAAQ+G,EAAYrN,iBAAiB,OAChDhC,MAAM,UACN6W,WAAS,GAHb,aCjDDI,GAxCQ,WACnB,IAAM/S,EAAUC,qBAAWC,GAE3B,GAA8B,KAA1BF,EAAQtB,OAAO6C,QACa,KAA5BvB,EAAQrB,SAAS4C,QACS,KAA1BvB,EAAQpB,OAAO2C,QACe,KAA9BvB,EAAQnB,WAAW0C,QACK,KAAxBvB,EAAQlB,KAAKyC,OAJjB,CASI,IAAM+I,EAAkBtC,EACpBhI,EAAQrB,SAAS2I,KAAK,IAAKtH,EAAQtB,OAAO4I,KAAK,KAE7CiD,EAAgBvC,EAClBhI,EAAQrB,SAAS2I,KAAK,IAAKtH,EAAQpB,OAAO0I,KAAK,KAMnD,OAAOxB,aAAa0E,QAAQF,EAAiBpE,KAAKuE,UAAU,CAExD/L,OAAQsB,EAAQtB,OAChBC,SAAUqB,EAAQrB,SAClBC,OAAQoB,EAAQpB,OAChBC,WAAYmB,EAAQnB,WAIpBC,KAAMkB,EAAQtB,OACd4L,gBAAiBA,EACjBC,cAAeA,EACfG,WAAY,IAAIC,UCoFbqI,GAhHM,WAEjB,IAAM5L,EAAezB,IACf3F,EAAUC,qBAAWC,GAKrB+S,EAAuB,sEAEvBC,EAAyB5K,GAAO2K,GAAsB,GAAGlN,MAAM,IAC/DoN,EAAuB7K,GAAO2K,GAAsB,GAAGlN,MAAM,IAC/DqN,EAAgB,CAChB1U,OAAQyU,EACRxU,SAAUuU,EACVtU,OAAQuU,EACRtU,WAAYsU,EAAqBvQ,IAAI,iBAAM,KAC3C9D,KAAMqU,EACN7I,gBAAiB2I,EACjBI,cAAeJ,EACfvI,WAAY,MAKV4I,EAAgBhc,SAASic,KAAKC,QAAQ,IAAI,IAC1CC,EAAgBnL,GAAOgL,GACvB3U,EAAW8U,EAAc,GAAG1N,MAAM,IAClCrH,EAAS+U,EAAc,GAAG1N,MAAM,IAMtC,GAGgC,KAA5B/F,EAAQrB,SAAS4C,QACS,KAA1BvB,EAAQtB,OAAO6C,QACW,KAA1BvB,EAAQpB,OAAO2C,QACe,KAA9BvB,EAAQnB,WAAW0C,QACK,KAAxBvB,EAAQlB,KAAKyC,OAkEjB,MAzDsB,KAAlB+R,GACyB,IAAzBG,EAAclS,QACM,KAApB5C,EAAS4C,QACS,KAAlB7C,EAAO6C,OAIqB,IAAxB6F,EAAa7F,SAKb6R,EAJqBhM,EAAajF,OAAO,SAACC,EAAKC,GAE3C,OAAOD,EAAIsI,WAAarI,EAAIqI,WAAatI,EAAMC,KAQvD+Q,EAAgB,CACZ1U,OAAQA,EACRC,SAAUA,EACVC,OAAQF,EACRG,WAAYH,EAAOkE,IAAI,iBAAM,KAC7B9D,KAAMJ,EACN4L,gBAAiBgJ,EACjBD,cAAeC,EACf5I,WAAY,MAKpB1K,EAAQhB,YAAYoU,EAAczU,UAClCqB,EAAQjB,UAAUqU,EAAc1U,QAChC0U,EAAcxU,OAAOgE,IAAI,SAAC5F,EAAOsF,GAE7B,OAAOtC,EAAQf,UAAU8C,IAAI/E,EAAOsF,KAGxCtC,EAAQd,aAAaqH,UAErB6M,EAAcvU,WAAW+D,IAAI,WACzB,OAAO5C,EAAQd,aAAa6C,IAAI,MAEpCqR,EAAcvU,WAAW+D,IAAI,SAAC4D,EAAgBlE,GAC1C,OAAOkE,EAAe5D,IAAI,SAAA6D,GAEtB,OAAOzG,EAAQd,aAAa6C,IAAI0E,EAAWnE,OAGnD8Q,EAActU,KAAK8D,IAAI,SAAC5F,EAAOsF,GAE3B,OAAOtC,EAAQb,QAAQ4C,IAAI/E,EAAOsF,KAKtCoR,QAAQC,aAAa,GAAIpI,SAASmF,MAAOpZ,SAAS2F,UAC3C+C,GC7GI4T,GAPM3Q,YAAW,CAC5B4Q,IAAK,KC2DMC,GAnCH,WAIRd,KACAD,KAGA,IAAMnP,EAASgQ,KAGf,OACIjX,EAAAC,EAAAC,cAACmI,EAAA,EAAD,CAAQjB,UAAaH,EAAOiQ,KAExBlX,EAAAC,EAAAC,cAACkX,EAAA,EAAD,CAAUC,WAAa,OAAOC,QAAW,GAErCtX,EAAAC,EAAAC,cAACqX,EAAA,EAAD,CAAcC,KAAQ,EAAG5M,KAAQ,GAC7B5K,EAAAC,EAAAC,cAACuX,EAAD,KACIzX,EAAAC,EAAAC,cAACwX,EAAD,QAIR1X,EAAAC,EAAAC,cAACqX,EAAA,EAAD,CAAcC,KAAQ,EAAG5M,KAAQ,GAC7B5K,EAAAC,EAAAC,cAACyX,EAAD,KACI3X,EAAAC,EAAAC,cAAC0X,GAAD,WCvDXC,GAAgB,SAACnc,EAAOoc,GACjC,OAAQA,EAAOtK,MACX,IALkB,aAMd,OAAOuK,GAAUD,EAAO7V,OAAQ6V,EAAOnS,MAAOjK,GAClD,IANqB,gBAOjB,OAAOsc,GAAaF,EAAOnS,MAAOjK,GACtC,QACI,OAAOA,IAMbuc,GAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAGxDF,GAAY,SAAC9V,EAAQiW,EAAUxc,GAEjC,OAAIA,EAAMkJ,OAAS,IACflJ,EAAMoP,KAAK7I,GACJvG,GACJuc,GAAQ3S,SAASrD,GAIbvG,EAAMuK,IAAI,SAAC5F,EAAOsF,GACrB,OAAIA,IAAUuS,EACHjW,EAEA5B,IANR3E,GAYTsc,GAAe,SAACE,EAAUxc,GAC5B,OAAOA,EAAMuK,IAAI,SAAC5F,EAAOsF,GACrB,OAAIA,IAAUuS,EACH,IAEA7X,KCtCN8X,GAAmB,SAACzc,EAAOoc,GACpC,OAAQA,EAAOtK,MACX,IAPqB,gBAQjB,OAAO4K,GAAaN,EAAOhO,UAAWgO,EAAOnS,MAAOjK,GACxD,IARwB,mBASpB,OAAO2c,GAAgBP,EAAOhO,UAAWgO,EAAOnS,MAAOjK,GAC3D,IATgB,WAUZ,OAAOwK,GAAQ4R,EAAOnS,MAAOjK,GACjC,IAVuB,kBAWnB,OAAO4c,KACX,QACI,OAAO5c,IAObwG,GAAa,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAItDkW,GAAe,SAACtO,EAAWyO,EAAgB7c,GAG7C,OAAIA,EAAMkJ,OAAS,IACflJ,EAAMoP,KAAKhB,GACJpO,GACJwG,GAAWoD,SAASwE,GAIhBpO,EAAMuK,IAAI,SAAC5F,EAAOsF,GACrB,OAAIA,IAAU4S,EACNlY,EAAMiF,SAASwE,GACRzJ,GAEPA,EAAMyK,KAAKhB,GACJzJ,GAGJA,IAXR3E,GAiBT2c,GAAkB,SAACvO,EAAWyO,EAAgB7c,GAChD,OAAOA,EAAMuK,IAAI,SAAC5F,EAAOsF,GACrB,OAAIA,IAAU4S,GACVlY,EAAM2K,OAAO3K,EAAMoM,QAAQ3C,GAAY,GAChCzJ,GAEAA,KAKb6F,GAAU,SAACqS,EAAgB7c,GAC7B,OAAOA,EAAMuK,IAAI,SAAC5F,EAAOsF,GACrB,OAAIA,IAAU4S,EACH,GAEAlY,KAKbiY,GAAiB,WACnB,MAAO,ICvEEE,GAAc,SAAC9c,EAAOoc,GAC/B,OAAQA,EAAOtK,MACX,IALgB,WAMZ,OAAOiL,GAAQX,EAAO3V,KAAM2V,EAAOnS,MAAOjK,GAC9C,IANmB,cAOf,OAAOgd,GAAWZ,EAAOnS,MAAOjK,GACpC,QACI,OAAOA,IAMbid,GAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAGtDF,GAAU,SAACtW,EAAMyW,EAAWld,GAE9B,OAAIA,EAAMkJ,OAAS,IACflJ,EAAMoP,KAAK3I,GACJzG,GACJid,GAAMrT,SAASnD,GAIXzG,EAAMuK,IAAI,SAAC5F,EAAOsF,GACrB,OAAIA,IAAUiT,EACHzW,EAEA9B,IANR3E,GAYTgd,GAAa,SAACE,EAAWld,GAC3B,OAAOA,EAAMuK,IAAI,SAAC5F,EAAOsF,GACrB,OAAIA,IAAUiT,EACH,IAEAvY,KCuFJwY,GAxGK,SAAAnZ,GAAS,IAAAC,EACGC,mBAAS,IADZC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAClBoC,EADkBlC,EAAA,GACVuC,EADUvC,EAAA,GAAA2D,EAEO5D,mBAAS,IAFhB6D,EAAA3D,OAAAC,EAAA,EAAAD,CAAA0D,EAAA,GAElBxB,EAFkByB,EAAA,GAERpB,EAFQoB,EAAA,GAAAqV,EAGQC,qBAC7BlB,GAEA,IANqBmB,EAAAlZ,OAAAC,EAAA,EAAAD,CAAAgZ,EAAA,GAGlB7W,EAHkB+W,EAAA,GAGVC,EAHUD,EAAA,GAAAE,EAWeH,qBACpCZ,GAEA,IAdqBgB,EAAArZ,OAAAC,EAAA,EAAAD,CAAAoZ,EAAA,GAWlBhX,EAXkBiX,EAAA,GAWNC,EAXMD,EAAA,GAAAE,EAgBIN,qBACzBP,GAEA,IAnBqBc,EAAAxZ,OAAAC,EAAA,EAAAD,CAAAuZ,EAAA,GAgBlBlX,EAhBkBmX,EAAA,GAgBZC,EAhBYD,EAAA,GAuBnBhX,EAAY,CACd8C,IAAK,SAACnD,EAAQ0D,GACVsT,EAAe,CACXzL,KHpDU,aGqDVvL,OAAQA,EACR0D,MAAOA,KAGfb,OAAQ,SAAAa,GACJsT,EAAe,CACXzL,KH1Da,gBG2Db7H,MAAOA,MAKbpD,EAAe,CACjB6C,IAAK,SAAC0E,EAAWnE,GACbyT,EAAkB,CACd5L,KFpEa,gBEqEb1D,UAAWA,EACXnE,MAAOA,KAGfb,OAAQ,SAACgF,EAAWnE,GAChByT,EAAkB,CACd5L,KF1EgB,mBE2EhB1D,UAAWA,EACXnE,MAAOA,KAGfO,QAAS,SAACP,GACNyT,EAAkB,CACd5L,KFhFQ,WEiFR7H,MAAOA,KAGfiE,QAAS,WACLwP,EAAkB,CACd5L,KFrFe,sBE0FrBhL,EAAU,CACZ4C,IAAK,SAACjD,EAAMwD,GACR4T,EAAa,CACT/L,KDhGQ,WCiGRrL,KAAMA,EACNwD,MAAOA,KAGfb,OAAQ,SAAAa,GACJ4T,EAAa,CACT/L,KDtGW,cCuGX7H,MAAOA,MAKnB,OACI3F,EAAAC,EAAAC,cAACsZ,EAAcpZ,SAAf,CAAwBC,MAAS,CAE7B0B,OAAQA,EACRC,SAAUA,EACVC,OAAQA,EACRC,WAAYA,EACZC,KAAMA,EAENC,UAAWA,EACXC,YAAaA,EACbC,UAAWA,EACXC,aAAcA,EACdC,QAASA,IAER9C,EAAMa,WC1GnBkZ,IAASC,OACL1Z,EAAAC,EAAAC,cAACyZ,GAAD,KACI3Z,EAAAC,EAAAC,cAAC0Z,EAAA,EAAD,CAAe1d,MAASA,GACpB8D,EAAAC,EAAAC,cAAC2Z,GAAD,QAGRjL,SAASkL,eAAe,S1CfrB,SAAkB9e,GACrB,GAA6C,kBAAmBC,UAAW,CAEvE,GADkB,IAAI8e,IAAIC,kBAAwBtf,OAAOC,SAASsf,MACpDC,SAAWxf,OAAOC,SAASuf,OAKzC,OAGJxf,OAAOwI,iBAAiB,OAAQ,WAC5B,IAAMnI,EAAK,GAAAoK,OAAM6U,kBAAN,sBACPxf,GAkEZ,SAAiCO,EAAOC,GAEpCmf,MAAMpf,GACLK,KAAK,SAAAgf,GAGF,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBACjB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAY5N,QAAQ,cAGxCxR,UAAUC,cAAcuf,MAAMrf,KAAK,SAAAC,GAC/BA,EAAaqf,aAAatf,KAAK,WAC3BV,OAAOC,SAASggB,aAM5B7f,EAAgBC,EAAOC,KAG9BgB,MAAM,WACHJ,QAAQC,IACJ,mEAvFA+e,CAAwB7f,EAAOC,GAG/BC,UAAUC,cAAcuf,MAAMrf,KAAK,WAC/BQ,QAAQC,IACJ,gHAORf,EAAgBC,EAAOC,M0CVnCE,sBC3BA2f,EAAAC,QAAA,CAAkBC,cAAA,UAAApK,cAAA,UAAAqK,cAAA,UAAApK,cAAA,UAAA1T,cAAA,UAAA+d,cAAA,UAAAC,cAAA,UAAA9d,cAAA,UAAA+d,cAAA,UAAAC,eAAA,UAAA9d,eAAA,UAAAsU,gBAAA,UAAAyJ,gBAAA,UAAAC,gBAAA,UAAA5I,gBAAA,UAAAjV,gBAAA,UAAA8d,gBAAA,UAAAC,gBAAA,UAAA9d,gBAAA,UAAA+d,gBAAA,UAAAC,iBAAA,UAAA/d,iBAAA,UAAAjB,cAAA,UAAAK,cAAA,UAAAsV,cAAA,UAAAxV,cAAA,UAAA0V,cAAA,UAAAlU,cAAA,UAAAgS,cAAA,UAAAlS,cAAA,UAAAwd,cAAA,UAAA1d,eAAA,UAAAzB,eAAA,UAAAof,eAAA,UAAA5d,eAAA,UAAAyT,gBAAA,UAAAoK,gBAAA,UAAAC,gBAAA,UAAAC,gBAAA,UAAAC,gBAAA,UAAAvL,gBAAA,UAAAwL,gBAAA,UAAAC,gBAAA,UAAAC,gBAAA,UAAAC,iBAAA,UAAAC,iBAAA,UAAA9K,iBAAA,UAAA+K,iBAAA,UAAAC,iBAAA,UAAAC,iBAAA,UAAAC,iBAAA,UAAAC,iBAAA,UAAAC,iBAAA,UAAAC,iBAAA,UAAAC,iBAAA,UAAAC,kBAAA,UAAAC,kBAAA,UAAAC,cAAA,UAAAC,cAAA,UAAAC,cAAA,UAAAjM,cAAA,UAAArT,cAAA,UAAAuf,cAAA,UAAAC,cAAA,UAAAvf,cAAA,UAAA0S,cAAA,UAAA8M,eAAA,UAAAvf,eAAA","file":"static/js/main.5ae66f0b.chunk.js","sourcesContent":["const isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used \n        // to serve assets; \n        // see https://github.com/facebook/create-react-app/issues/2374\n        return\n        }   \n\n    window.addEventListener(\"load\", () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n        if (isLocalhost) {\n            // This is running on localhost. Let's check if a service worker \n            // still exists or not.\n            checkValidServiceWorker(swUrl, config)\n            // Add some additional logging to localhost, pointing developers to \n            // the service worker/PWA documentation.\n            navigator.serviceWorker.ready.then(() => {\n                console.log(\n                    \"This web app is being served cache-first by a service \" +\n                    \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                )\n            })\n        } \n        else {\n            // Is not localhost. Just register service worker\n            registerValidSW(swUrl, config)\n        }\n    })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null) {\n            return\n            }\n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === \"installed\") {\n                    if (navigator.serviceWorker.controller) {\n                        // At this point, the updated precached content has \n                        // been fetched, but the previous service worker will \n                        // still serve the older content until all client tabs \n                        // are closed.\n                        console.log(\n                            \"New content is available and will be used \" +\n                            \"when all tabs for this page are closed \" +\n                            \". See https://bit.ly/CRA-PWA.\"\n                        )\n                        // Execute callback\n                        if (config && config.onUpdate) {\n                            config.onUpdate(registration)\n                        }\n                    } \n                    else {\n                        // At this point, everything has been precached.\n                        // It\"s the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log(\"Content is cached for offline use.\")\n                        // Execute callback\n                        if (config && config.onSuccess) {\n                            config.onSuccess(registration)\n                        }\n                    }\n                }\n            }\n        }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can\"t reload the page.\n    fetch(swUrl)\n    .then(response => {\n        // Ensure service worker exists, and that we really are getting a \n        // JS file.\n        const contentType = response.headers.get(\"content-type\")\n        if (response.status === 404 || \n            (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. \n                // Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n        } \n        else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config)\n        }\n    })\n    .catch(() => {\n        console.log(\n            \"No internet connection found. App is running in offline mode.\"\n        )\n    })\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n        registration.unregister()\n        })\n    }\n}\n","//General imports\r\n\r\n//Material-ui imports\r\nimport { \r\n    createMuiTheme \r\n} from \"@material-ui/core/styles\"\r\n\r\n//Own imports\r\nimport variables from \"./index.scss\"\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        common: {\r\n            black: variables.neutralColor11,\r\n            white: variables.neutralColor1\r\n        },\r\n        background: {\r\n            paper: variables.neutralColor4,\r\n            default: variables.neutralColor2\r\n        },\r\n        primary: {\r\n            light: variables.primaryColor5,\r\n            main: variables.primaryColor8,\r\n            dark: variables.primaryColor11,\r\n            contrastText: variables.neutralColor1\r\n        },\r\n        secondary: {\r\n            light: variables.secondaryColor5,\r\n            main: variables.secondaryColor8,\r\n            dark: variables.secondaryColor11,\r\n            contrastText: variables.neutralColor1\r\n        },\r\n        error: {\r\n            light: variables.redHighlight5,\r\n            main: variables.redHighlight8,\r\n            dark: variables.redHighlight11,\r\n            contrastText: variables.neutralColor1\r\n        },\r\n        text: {\r\n            primary: variables.neutralColor13,\r\n            secondary: variables.neutralColor10,\r\n            disabled: variables.neutralColor8,\r\n            hint: variables.neutralColor6\r\n        }\r\n    },\r\n    overrides: {\r\n        // Overriding stlyes for MuiButton, MuiToggleButton, etc. to ensure that\r\n        // buttons may be scaled as small as required for any given screen \r\n        // size\r\n        MuiToggleButton: {\r\n            root: {\r\n                padding: \"0.1rem\",\r\n                \"&:last-child\": {\r\n                    paddingLeft: \"0.1rem\"\r\n                }\r\n            },\r\n            sizeSmall: {\r\n                minWidth: \"1px\",\r\n                minHeight: \"1px\"\r\n            }\r\n        },\r\n        MuiButton: {\r\n            sizeSmall: {\r\n                padding: \"0.1rem\",\r\n                minWidth: \"1px\",\r\n                minHeight: \"1px\"\r\n            }\r\n        },\r\n        MuiButtonGroup: {\r\n            grouped: {\r\n                minWidth: \"1px\"\r\n            }\r\n        },\r\n        MuiSvgIcon: {\r\n            root: {\r\n                color: \"inherit\",\r\n                fontSize: \"150%\"\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport default theme","import {\r\n    createContext\r\n} from \"react\"\r\n\r\nexport default createContext({\r\n    pathLoaded: () => {},\r\n    // Indicates if header drawer is open for the purposes of rendering\r\n    isDrawerOpen: false,\r\n    setIsDrawerOpen: () => {}\r\n})","// General imports\r\nimport React, {\r\n    useState\r\n} from \"react\"\r\n\r\n// Own imports\r\nimport HeaderContext from \"../Header\"\r\n\r\n// Component\r\nconst HeaderState = props => {\r\n    const [isDrawerOpen, setIsDrawerOpen] = useState(false)\r\n\r\n    // Returns pathname for conditionally rendering active link in the header\r\n    // drawer\r\n    // eslint-disable-next-line\r\n    const pathLoaded = () => { return location.pathname }\r\n\r\n    return (\r\n        <HeaderContext.Provider value = {{\r\n            pathLoaded: pathLoaded,\r\n            isDrawerOpen: isDrawerOpen,\r\n            setIsDrawerOpen: setIsDrawerOpen\r\n        }} >\r\n            {props.children}\r\n        </HeaderContext.Provider>\r\n    )\r\n}\r\n\r\n// Exports\r\nexport default HeaderState","import {\r\n    createContext\r\n} from \"react\"\r\n\r\nexport default createContext({\r\n    // Context for the solver component\r\n        // Index of cell currently selected by the client\r\n        selectedCell: 0,\r\n        // Current input method selected by the ToggleButton component in\r\n        // Input selector component\r\n        inputMethod: \"\",\r\n        // Object of possible input methods\r\n        methods: {},\r\n        // Some number based on screen size used to scale components (mainly \r\n        // sudoku cells), to ensure that things scale on smaller screens\r\n        responsiveSize: 0,\r\n        // Current dialog displayed the SolveSudoku component (defaults to null\r\n        // indicating no dialog overlay)\r\n        currentDialog: null,\r\n        // Object of possible dialogs to display\r\n        dialogs: {},\r\n        // State to hold number of answers removed when the client checks their \r\n        // puzzle for incorrect answers. Used to display the number in a the\r\n        // Check dialog component, and reset to 0 when the dialog is closed\r\n        answersRemoved: 0,\r\n        // When in TEST input mode, this number indicates the index of the first\r\n        // test number to be inserted. This allows the SudokuGrid component to\r\n        // conditionally render this number, and also to remove this number from\r\n        // the list of its cell's candidates if the user chooses to\r\n        firstTest: 0,\r\n    // Solver context methods\r\n        setSelectedCell: () => {},\r\n        setInputMethod: () => {},\r\n        setResponsiveSize: () => {},\r\n        setCurrentDialog: () => {},\r\n        setAnswersRemoved: () => {},\r\n        setFirstTest: () => {},\r\n    // Input handlers\r\n        // Handles any input method\r\n        handleChange: () => {},\r\n    // Operation handlers\r\n        // Handles operation buttons, as each name suggests\r\n        handleCheck: () => {},\r\n        handleGiveAnswer: () => {},\r\n        handleRemoveCell: () => {},\r\n        handleRestart: () => {},\r\n        handlePopulateCandidates: () => {},\r\n    // Dialog handlers\r\n        // Handles actions dispatched by Test dialog component\r\n        deleteTest: () => {},\r\n        removeInitCandidate: () => {},\r\n        testToAnswer: () => {}\r\n})","// General imports\r\nimport {\r\n    createContext\r\n} from \"react\"\r\n\r\n// Blank values initiated here to highlight structure of state, and to aid with\r\n// vscode auto-completion.\r\nexport default createContext({\r\n    // Some array of numbers representing the incomplete puzzle, where a 0\r\n    // represents an unsolved cell - numbers arranged by row left to right.\r\n    puzzle: [],\r\n    // Some array of numbers representing the completed solution to the sudoku \r\n    // puzzle - numbers arranged by row left to right.\r\n    solution: [],\r\n    // Some array of numbers representing the current progression of the player \r\n    // towards the solution - numbers arranged by row left to right.\r\n    answer: [],\r\n    // Array of 81 arrays (initialised by usePopulate hook). Each array contains\r\n    // candidates used by the client to work out the correct answeres - arrays \r\n    // arranged by row left to right.\r\n    candidates: [],\r\n    // Array set equal to puzzle each time it is used. Test may be used by the\r\n    // client to test if a given cell can be a specific value (choose a\r\n    // candidate from a cell, then propagate that guess by filling in\r\n    // surrounding cells according to the test cell, and see if a contradiction\r\n    // is made, which would indicate that the first test cell cannot be of the\r\n    // suggested value)\r\n    test: [],\r\n    // Set puzzle, and solution replace entire array only\r\n    setPuzzle: () => {},\r\n    setSolution: () => {},\r\n    // Set answer, candidates, and test alters current value(s) to reflect the \r\n    // changes by the client\r\n    setAnswer: () => {},\r\n    setCandidate: () => {},\r\n    setTest: () => {}\r\n})","// General imports \r\nimport { \r\n    useState, \r\n    useEffect \r\n} from \"react\"\r\n\r\n// Custom hook\r\nconst useWindowSize = () => {  \r\n    // State for windows size\r\n    const [windowSize, setWindowSize] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n    })\r\n    // Handle change of window size\r\n    const handleSizeChange = () => {\r\n        setWindowSize ({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        })\r\n    }\r\n    useEffect(() => {\r\n        // Watch window size\r\n        window.addEventListener(\"resize\", handleSizeChange)\r\n        // Clean up on unmount\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleSizeChange)\r\n        }\r\n    })\r\n    //window.addEventListener(\"resize\", handleSizeChange)\r\n    return windowSize\r\n}\r\n\r\n// Exports\r\nexport default useWindowSize","// General imports\r\nimport React, {\r\n    useState, \r\n    useContext\r\n} from \"react\"\r\n\r\n// Own imports \r\n    //Context\r\n    import MainContext from \"../Main\"\r\n    import GlobalContext from \"../Global\"\r\n    // Components\r\n    // Hooks\r\n    import useWindowSize from \"../../hooks/windowSize\"\r\n    // Style hooks\r\n\r\n// Component\r\nconst MainState = props => {\r\n    //Context & state\r\n    const context = useContext(GlobalContext)\r\n    // Init fields for mainContext\r\n    const [selectedCell, setSelectedCell] = useState() \r\n    const [inputMethod, setInputMethod] = useState(\"ANSWER\")\r\n    // Possible input methods\r\n    const methods = {\r\n        ANSWER: \"ANSWER\", \r\n        CANDIDATES: \"CANDIDATES\",\r\n        TEST: \"TEST\"\r\n    }\r\n    const [responsiveSize, setResponsiveSize] = useState()\r\n    const [currentDialog, setCurrentDialog] = useState(null)\r\n    // Possible dialogs\r\n    const dialogs = {\r\n        CHECK: \"CHECK\",\r\n        RESTART: \"RESTART\",\r\n        POPULATE_CANDIDATES: \"POPULATE_CANDIDATES\",\r\n        TEST: \"TEST\"\r\n    }\r\n    const [answersRemoved, setAnswersRemoved] = useState(0)\r\n    const [firstTest, setFirstTest] = useState()\r\n\r\n    // Fetch window size\r\n    const size = useWindowSize()\r\n\r\n    // Helper functions\r\n    // Change default divider value to scale size of the components displayed\r\n    const handleSizeChange = (\r\n        divider = 13, \r\n        width = size.width,\r\n        height = size.height\r\n        ) => {\r\n        // Returns some size based on screen width or screen height (whichever \r\n        // is smaller). Size used to dynamically determine component sizes\r\n        if (height > width) {\r\n            // Make puzzle take up more space on smaller, vertical screen (such\r\n            // as smartphones)\r\n            return setResponsiveSize(Math.floor(width / (divider - 2)))\r\n        } else {\r\n            return setResponsiveSize(Math.floor(height / divider))\r\n        }\r\n    }\r\n\r\n    // Shorthand call to global context reducers with appropriate default args\r\n    const handleRemoveAnswer = (cell = selectedCell) => {\r\n        return context.setAnswer.remove(cell)\r\n    }\r\n    const handleRemoveCandidates = (cell = selectedCell) => {\r\n        context.setCandidate.burnOne(cell)\r\n    } \r\n    const handleRemoveTest = (cell = selectedCell) => {\r\n        return context.setTest.remove(cell)\r\n    }\r\n\r\n    // INPUT HANDLERS\r\n    const handleChange = number => {\r\n        switch (inputMethod) {\r\n            case methods.ANSWER:\r\n                return handleAnswerChange(number)\r\n            case methods.CANDIDATES:\r\n                return handleCandidateChange(number)\r\n            case methods.TEST:\r\n                return handleTestChange(number)\r\n            default:\r\n                return\r\n        }\r\n    }\r\n    const handleAnswerChange = (number, cell = selectedCell) => {\r\n        const numString = `${number}`\r\n        return context.setAnswer.add(numString, cell)\r\n    }\r\n    const handleCandidateChange = (number, cell = selectedCell) => {\r\n        if (context.answer[cell] !== \"0\" ||\r\n            context.test[cell] !== \"0\") {\r\n            return null\r\n        } else {\r\n            const numString = `${number}`\r\n            context.candidates[cell].includes(numString) ?\r\n                context.setCandidate.remove(numString, cell) :\r\n                context.setCandidate.add(numString, cell)\r\n        }\r\n    }\r\n    const handleTestChange = (number, cell = selectedCell) => {\r\n        const numString = `${number}`\r\n        if (context.answer[cell] !== \"0\") {\r\n            return null\r\n        } else if (\r\n            // Checking to see if test is same as puzzle (test reset to puzzle\r\n            // each time client has finished) this allows us to mark the first\r\n            // number in a test with a special style, denoting the initial\r\n            // assumption\r\n            context.test.reduce((acc, cur, index) => {\r\n                return acc ? \r\n                    (cur === context.puzzle[index] ? \r\n                        true : false) : false\r\n            }, true)\r\n        ) {\r\n            setFirstTest(cell)\r\n            return context.setTest.add(numString, cell)\r\n        }\r\n        else {\r\n            return context.setTest.add(numString, cell)\r\n        }\r\n    }  \r\n    \r\n    // OPERATION HANDLERS\r\n    // Removes answer from cell, and removes all candidates from cell if there\r\n    // is no answer\r\n    const handleRemoveCell = () => {\r\n        if (context.answer[selectedCell] !== \"0\") {\r\n            handleRemoveAnswer()\r\n            // Test should not be present in same cell as answer, but this \r\n            // statement ensures that when an answer is deleted, no test will\r\n            // show up underneath it\r\n            return handleRemoveTest()\r\n        } else if (context.test[selectedCell] !== \"0\") {\r\n            return handleRemoveTest()\r\n        } else if (context.test[selectedCell] === \"0\") {\r\n            return handleRemoveCandidates()\r\n        } \r\n    }\r\n    // Populates current selected cell with the correct answer\r\n    const handleGiveAnswer = () => {\r\n        handleAnswerChange(context.solution[selectedCell])\r\n    }\r\n    // Checks entire grid, and removes any incorrect answers\r\n    const handleCheck = () => {\r\n        let countAnswersRemoved = 0\r\n        context.answer.map((value, index) => {\r\n            if (value === context.solution[index]) { \r\n                return value\r\n            } else if (context.answer[index] !== \"0\") {\r\n                countAnswersRemoved++\r\n                handleRemoveTest(index)\r\n                return handleRemoveAnswer(index)\r\n            } else {\r\n                return null\r\n            }\r\n        })\r\n        setAnswersRemoved(countAnswersRemoved)\r\n        setCurrentDialog(dialogs.CHECK)\r\n    }\r\n    // Reset answer to the initial puzzle, and remove all candidates, and tests\r\n    const handleRestart = () => {\r\n        context.puzzle.map((value, index) => {\r\n            context.setCandidate.burnOne(index)\r\n            context.setTest.remove(index)\r\n            return handleAnswerChange(value, index)\r\n        })\r\n    }\r\n    // Add all candidates 1-9 to cells which currently have no clue, and no\r\n    // answer. Note still adds candidates to a cell if a test number populates\r\n    // it\r\n    const handlePopulateCandidates = () => {\r\n        context.answer.map((value, index) => {\r\n            const candidateArray = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\r\n            if (value === \"0\") {\r\n                return candidateArray.map(num => {\r\n                    if (context.candidates[index].includes(num)) {\r\n                        return null\r\n                    } else {\r\n                        return handleCandidateChange(num, index)\r\n                    }\r\n                })\r\n            } else {\r\n                return null\r\n            }\r\n        })\r\n    }\r\n\r\n    // Dialog handlers\r\n    const deleteTest = () => {\r\n        // Restore test array to be equivalent to puzzle array\r\n        context.puzzle.map((value, index) => {\r\n            if (value === context.test[index]) { \r\n                return null\r\n            } else if (context.test[index] !== \"0\") {\r\n                return handleRemoveTest(index)\r\n            } else {\r\n                return null\r\n            }\r\n        })\r\n        setFirstTest(null)\r\n        setCurrentDialog(null)\r\n    } \r\n    const removeInitCandidate = () => {\r\n        context.setCandidate.remove(\r\n            context.test[firstTest], firstTest)\r\n        // Restore test array to be equivalent to puzzle array\r\n        context.puzzle.map((value, index) => {\r\n            if (value === context.test[index]) { \r\n                return null\r\n            } else if (context.test[index] !== \"0\") {\r\n                return handleRemoveTest(index)\r\n            } else {\r\n                return null\r\n            }\r\n        })\r\n        setFirstTest(null)\r\n        setCurrentDialog(null)\r\n    } \r\n    const testToAnswer = () => {\r\n        // Move all number in test array to answer array\r\n        context.test.map((value, index) => {\r\n            if (value === context.answer[index]) { \r\n                return null\r\n            } else if (value !== \"0\") {\r\n                handleRemoveTest(index)\r\n                return handleAnswerChange(value, index)\r\n            } else {\r\n                return null\r\n            }\r\n        })\r\n        setFirstTest(null)\r\n        setCurrentDialog(null)\r\n    }\r\n\r\n    return (\r\n        <MainContext.Provider value = {{\r\n            // Solver component context\r\n                selectedCell: selectedCell,\r\n                inputMethod: inputMethod,\r\n                methods: methods,\r\n                responsiveSize: responsiveSize,\r\n                currentDialog: currentDialog,\r\n                dialogs: dialogs,\r\n                answersRemoved: answersRemoved,\r\n                firstTest: firstTest,\r\n            // Solver component mehtods\r\n                setSelectedCell: setSelectedCell,\r\n                setInputMethod: setInputMethod,\r\n                setResponsiveSize: handleSizeChange,\r\n                setCurrentDialog: setCurrentDialog,\r\n                setAnswersRemoved: setAnswersRemoved,\r\n                setFirstTest: setFirstTest,\r\n            // Input handlers\r\n                handleChange: handleChange,\r\n            // Operation handlers\r\n                handleCheck: handleCheck,\r\n                handleGiveAnswer: handleGiveAnswer,\r\n                handleRemoveCell: handleRemoveCell,\r\n                handleRestart: handleRestart,\r\n                handlePopulateCandidates: handlePopulateCandidates,\r\n            // Dialog handlers\r\n                deleteTest: deleteTest,\r\n                removeInitCandidate: removeInitCandidate,\r\n                testToAnswer: testToAnswer\r\n        }} >\r\n            {props.children}\r\n        </MainContext.Provider>\r\n    )\r\n}\r\n\r\n// Exports\r\nexport default MainState","//General imports\r\n\r\n//Material-ui imports\r\nimport { \r\n    makeStyles\r\n} from \"@material-ui/styles\"\r\n\r\n//Own imports\r\nimport variables from \"../index.scss\"\r\n\r\n// Styles\r\nconst useHeaderStyles = makeStyles({\r\n    header: {\r\n        height: \"4rem\"\r\n    },\r\n    drawer: {\r\n        backgroundColor: variables.primaryColor11,\r\n        height: \"100vh\",\r\n        width: \"15rem\"\r\n    },\r\n    drawerItem: {\r\n        color: variables.neutralColor1,\r\n        textDecoration: \"none\",\r\n        // Redundancy color setting for list icon\r\n        \"& svg.MuiSvgIcon-root\": {\r\n            color: variables.neutralColor1\r\n        }\r\n    },\r\n    drawerItemActive: {\r\n        color: variables.neutralColor8,\r\n        textDecoration: \"none\",\r\n        // Redundancy color setting for list icon\r\n        \"& svg.MuiSvgIcon-root\": {\r\n            color: variables.neutralColor8\r\n        }\r\n    }\r\n})\r\n\r\n// Exports\r\nexport default useHeaderStyles","//General imports\r\nimport React, {\r\n    useContext\r\n} from \"react\"\r\n\r\n//Material-ui imports\r\nimport { \r\n    SwipeableDrawer,\r\n    AppBar,\r\n    Toolbar,\r\n    IconButton\r\n} from \"@material-ui/core\"\r\nimport {\r\n    Menu\r\n} from \"@material-ui/icons\"\r\n\r\n// Own imports \r\n    //Context & States\r\n    import HeaderContext from \"../../context/Header\"\r\n    // Components\r\n    import {\r\n        Drawer\r\n    } from \"../exports\"\r\n    // Hooks\r\n    // Style hooks\r\n    import useHeaderStyles from \"../../styles/hooks/header\"\r\n\r\n//Render elements\r\nconst Header = () => {\r\n    // State and context\r\n    const headerContext = useContext(HeaderContext)\r\n\r\n    // Styles\r\n    const styles = useHeaderStyles()\r\n\r\n    // Component rneder JSX\r\n    return (\r\n        <div>\r\n            <AppBar position = \"static\" className = {styles.header}>\r\n                <Toolbar>\r\n                    <IconButton \r\n                        edge=\"start\" \r\n                        color=\"inherit\" \r\n                        aria-label=\"Menu\"\r\n                        onClick = {() => headerContext.setIsDrawerOpen(true)}\r\n                    >\r\n                        <Menu />\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n            \r\n            <SwipeableDrawer\r\n                anchor = \"left\"\r\n                open = {headerContext.isDrawerOpen}\r\n                onOpen = {() => headerContext.setIsDrawerOpen(true)}\r\n                onClose = {() => headerContext.setIsDrawerOpen(false)}\r\n            >\r\n                <Drawer styles = {styles} />\r\n            </SwipeableDrawer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","//General imports\r\nimport React, {\r\n    useContext\r\n} from \"react\"\r\n/*eslint-disable no-unused-vars*/\r\nimport { \r\n    /*Router must be imported for its functionality to work, even though the \r\n    Router component wraps the parent App component.*/\r\n    BrowserRouter as Router, Link, NavLink\r\n} from \"react-router-dom\"\r\n/*eslint-enable no-unused-vars*/\r\n\r\n//Material-ui imports\r\nimport {\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText\r\n} from \"@material-ui/core\"\r\nimport {\r\n    Help,\r\n    Create,\r\n    Folder,\r\n    GridOn\r\n} from \"@material-ui/icons\"\r\n\r\n// Own imports \r\n    //Context & States\r\n    import HeaderContext from \"../../context/Header\"\r\n    // Components\r\n    // Hooks\r\n    // Style hooks\r\n\r\nconst HeaderDrawer = props => {\r\n    // Context & state\r\n    const headerContext = useContext(HeaderContext)\r\n\r\n    // Styles\r\n    const styles = props.styles\r\n\r\n    // Helper functions\r\n    //eslint-disable-next-line\r\n    const linkStyle = path => {\r\n        return (headerContext.pathLoaded() === path) ? styles.drawerItemActive : \r\n        styles.drawerItem\r\n    }\r\n    \r\n    // Component render JSX\r\n    return(\r\n        <div className = {styles.drawer}>\r\n            {/*Routes from links rendered by the Main component, so parent \r\n            Router component wraps the entire App component instead.*/}\r\n            <List>\r\n\r\n                <Link to = \"/solve\" className = {styles.drawerItem}>\r\n                    <ListItem \r\n                        button = {true}\r\n                        className = {`${linkStyle(\"/solve\")} ${linkStyle(\"/\")}`}\r\n                        onClick = {() => { \r\n                            headerContext.setIsDrawerOpen(false) \r\n                        }}\r\n                    >\r\n\r\n                        {/*Icon to be displayed next to link*/}\r\n                        <ListItemIcon className = {`${linkStyle(\"/solve\")} \r\n                            ${linkStyle(\"/\")}`}\r\n                        > \r\n                            <GridOn /> \r\n                        </ListItemIcon>\r\n\r\n                        <ListItemText primary = \"Solve\" />\r\n\r\n                    </ListItem>\r\n                </Link>\r\n\r\n                <Link to = \"/load\" className = {styles.drawerItem}>\r\n                    <ListItem \r\n                        button = {true}\r\n                        className = {linkStyle(\"/load\")}\r\n                        onClick = {() => { \r\n                            headerContext.setIsDrawerOpen(false) \r\n                        }}\r\n                    >\r\n\r\n                        {/*Icon to be displayed next to link*/}\r\n                        <ListItemIcon className = {linkStyle(\"/load\")}> \r\n                            <Folder />\r\n                        </ListItemIcon>\r\n\r\n                        <ListItemText primary = \"Load Puzzle\" />\r\n\r\n                    </ListItem>\r\n                </Link>\r\n\r\n                <Link to = \"/set\" className = {styles.drawerItem}>\r\n                    <ListItem \r\n                        button = {true}\r\n                        className = {linkStyle(\"/set\")}\r\n                        onClick = {() => { \r\n                            headerContext.setIsDrawerOpen(false) \r\n                        }}\r\n                    >\r\n\r\n                        {/*Icon to be displayed next to link*/}\r\n                        <ListItemIcon className = {linkStyle(\"/set\")}> \r\n                            <Create /> \r\n                        </ListItemIcon>\r\n\r\n                        <ListItemText primary = \"Set Puzzle\" />\r\n\r\n                    </ListItem>\r\n                </Link>\r\n\r\n                <Link to = \"/instructions\" className = {styles.drawerItem}>\r\n                    <ListItem \r\n                        button = {true}\r\n                        className = {linkStyle(\"/instructions\")}\r\n                        onClick = {() => { \r\n                            headerContext.setIsDrawerOpen(false) \r\n                        }}\r\n                    >\r\n\r\n                        {/*Icon to be displayed next to link*/}         \r\n                        <ListItemIcon className = {linkStyle(\"/instructions\")}> \r\n                            <Help />\r\n                        </ListItemIcon>\r\n\r\n                        <ListItemText primary = \"Instructions\" />\r\n\r\n                    </ListItem>\r\n                </Link>\r\n                \r\n            </List>\r\n        </div>    \r\n    )\r\n}\r\n\r\nexport default HeaderDrawer","/*Follow the order laid out below in all relevant JS files - just copy this, \r\nor another template file to get going!*/\r\n\r\n// General imports\r\nimport React, {\r\n    useContext\r\n} from \"react\"\r\n\r\n// Material-ui imports\r\n\r\n// Own imports\r\nimport GlobalContext from \"../context/Global\"\r\n\r\n// Component\r\nconst Instructions = () => {\r\n    const context = useContext(GlobalContext)\r\n\r\n    \r\n\r\n    // Component render JSX\r\n    return (\r\n        <div>\r\n            Instructions\r\n            {context.puzzle}\r\n        </div>\r\n    )\r\n}\r\n\r\n// Exports\r\nexport default Instructions","// Custom hook - fetches and decodes all puzzles from local storage\r\nconst useGetPuzzles = () => {\r\n    // Fetch all puzzles from local storage\r\n    const keys = Object.keys({...localStorage}).reduce((acc, cur) => {\r\n        // Return only local storage keys that are formatted like an encoded \r\n        // sudoku (9 goups separated by periods)\r\n        return cur.split(\".\").length === 9 ? [...acc, cur] : acc\r\n    }, [])\r\n    // Decode local storage items\r\n    const puzzleArray = keys.map(key => {\r\n        return JSON.parse(localStorage.getItem(key))\r\n    })\r\n    return puzzleArray\r\n}\r\n\r\n// Exports\r\nexport default useGetPuzzles","// General imports\r\nimport { \r\n    useContext\r\n} from \"react\"\r\n\r\n// Own imports \r\n    //Context & States\r\n    import GlobalContext from \"../context/Global\"\r\n    // Components\r\n    // Hooks\r\n    // Style hooks\r\n\r\n// Custom hook - load puzzle into global context from argument \r\nconst useLoadPuzzle = localPuzzle => {\r\n    // Context & state\r\n    const context = useContext(GlobalContext)\r\n\r\n    // Circumvent error incase hook is called without valid argument\r\n    if (localPuzzle === null) {\r\n        return\r\n    }\r\n\r\n    // Extract puzzle values from argument - note that localPuzzle should\r\n    // always be a legitimate puzzle, since it is only called from useSetPuzzle\r\n    const puzzle = localPuzzle.puzzle\r\n    const solution = localPuzzle.solution\r\n    const answer = localPuzzle.answer\r\n    const candidates = localPuzzle.candidates\r\n    const test = localPuzzle.test\r\n\r\n    // Conditionally updating context with puzzle providing that a puzzle of the\r\n    // correct format has been provided (in this case a 9x9 sudoku). Note that \r\n    // the validity of the sudoku is NOT checked, only the format is checked.\r\n    if ( \r\n        // Prevent reset of context if given puzzle is already loaded in \r\n        // context, to stop infintie loop of updating context\r\n        context.solution === solution ||\r\n        context.puzzle === puzzle ||\r\n        context.answer === answer ||\r\n        // Prevent setting a sudoku of the incorrect format\r\n        solution.length !== 81 || \r\n        puzzle.length !== 81 || \r\n        answer.length !== 81 ||\r\n        candidates.length !== 81 ||\r\n        test.length !== 81\r\n    ) {\r\n        // Do not return error - client will indicate that no sudoku has been\r\n        // loaded, since the new puzzle will not be rendered in the SolvePuzzle\r\n        // page.\r\n        return\r\n    } else {\r\n        // Initialise the entire puzzle in global context.\r\n        context.setSolution(solution)\r\n        context.setPuzzle(puzzle)\r\n        answer.map((value, index) => {\r\n            // Must include index, as loadPuzzle may be replacing a puzzle which\r\n            // is currently stored in the global context.\r\n            return context.setAnswer.add(value, index)\r\n        })\r\n        // Remove all candidates\r\n        context.setCandidate.burnAll()\r\n        // Reset candidates as an array of empty arrays for each cell\r\n        candidates.map(() => {\r\n            return context.setCandidate.add([])\r\n        })\r\n        candidates.map((candidateArray, index) => {\r\n            return candidateArray.map(candidate => {\r\n                // Do not need to send an index, since we are performing an\r\n                // initial populate of the global context, and values are just\r\n                // pushed to the answer array if it shorter than 81\r\n                return context.setCandidate.add(candidate, index)\r\n            })\r\n        })\r\n        test.map((value, index) => {\r\n            // Index not strictly required\r\n            return context.setTest.add(value, index)\r\n        })\r\n        return context\r\n    }\r\n}\r\n\r\n// Exports\r\nexport default useLoadPuzzle","// Determines if a given index is in an odd numbered 3x3 box or not. Used\r\n// to conditionally render border, different shades etc. to denote the 3x3\r\n// boxes on the sudoku puzzle\r\nconst isOddBox = index => {\r\n    const add = numArray => num => numArray.map(value => value + num) \r\n    const _concat = (initialArray, newArrays) => newArrays.reduce(\r\n        (acc, cur) => {\r\n            return acc.concat(cur)\r\n        }, initialArray)\r\n    const seed = [0,1,2]\r\n    const firstBox = _concat(seed, seed.map(add([9, 18])))\r\n    const oddBoxes = _concat(firstBox, firstBox.map(add([6, 30, 54, 60])))\r\n    return oddBoxes.includes(index)\r\n}\r\n\r\n// Exports\r\nexport default isOddBox","// General imports\r\nimport React, {\r\n    useState\r\n} from \"react\"\r\n/*eslint-disable no-unused-vars*/\r\nimport { \r\n    /*Router must be imported for its functionality to work, even though the \r\n    Router component wraps the parent App component.*/\r\n    BrowserRouter as Router, Route, Redirect, Switch, Link\r\n} from \"react-router-dom\"\r\n/*eslint-enable no-unused-vars*/\r\n\r\n// Material-ui imports\r\nimport {\r\n    Paper\r\n} from \"@material-ui/core\"\r\n\r\n// Own imports \r\n    //Context & States\r\n    // Components\r\n    // Hooks\r\n    import useGetPuzzles from \"../hooks/getPuzzles\"\r\n    import useLoadPuzzle from \"../hooks/loadPuzzle\"\r\n    // Style hooks\r\n    // Other\r\n    import isOddBox from \"../functions/isOddBox\"\r\n\r\n\r\n// Component\r\nconst LoadPuzzle = props => {\r\n    // Context & state\r\n    const [puzzleToLoad, setPuzzleToLoad] = useState(null)\r\n    const localPuzzles = useGetPuzzles()\r\n\r\n    // Styles\r\n    const styles = props.styles\r\n    \r\n    // Load desired puzzle into global context\r\n    useLoadPuzzle(puzzleToLoad)\r\n\r\n    // Component pre-render JSX\r\n    // Array of sudokus previously used by client\r\n    const sudokus = localPuzzles.map((localPuzzle, index) => {\r\n        // Returns array of cells from puzzle, conditionally rendering answers,\r\n        // candidates, and clues with different styles - same logic as used in\r\n        // SudokuGrid component, except without onClick functions and selected\r\n        // cell style className assignment\r\n        const displayArray = localPuzzle.puzzle.map((cell, index) => {\r\n            if (cell === \"0\" && localPuzzle.answer[index] !== \"0\") {\r\n                return (\r\n                    <div key = {index} className = {`\r\n                            ${styles.answer} \r\n                            ${isOddBox(index) ? styles.light : styles.dark}\r\n                    `}>\r\n                        {localPuzzle.answer[index]}\r\n                    </div>\r\n                )\r\n            } if (cell === \"0\") {\r\n                return (\r\n                    <div key = {index} className = {`\r\n                            ${styles.candidate} \r\n                            ${isOddBox(index) ? styles.light : styles.dark}\r\n                    `}>\r\n                        {localPuzzle.candidates[index].join(\" \")}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div  key = {index} className = {`\r\n                        ${styles.puzzle} \r\n                        ${isOddBox(index) ? styles.light : styles.dark}\r\n                    `}>\r\n                        {cell}\r\n                    </div>\r\n                )\r\n            }\r\n        })\r\n    \r\n        // Map all cells generated above into rows, then into a sudoku to return\r\n        const rows = []\r\n        for (let count = 0; count < 9; count++) {\r\n            rows.push(\r\n                <div key = {count} className = {styles.row}>\r\n                    {displayArray.splice(0,9)}\r\n                </div>  \r\n            )  \r\n        }\r\n        const sudoku = (\r\n            <div key = {index} className = {styles.grid}>\r\n              {rows}  \r\n            </div>\r\n        )\r\n        return sudoku\r\n    })\r\n\r\n    // Component render JSX\r\n    return (\r\n        sudokus.map((puzzle, index) => {\r\n            return (\r\n                <Paper key = {index}>\r\n                    <Link to = \"/solve\" onMouseDown = {() => {\r\n                        /*onMouseDown ensures that setting of puzzle to context\r\n                        is executed before the component unloads*/\r\n                        setPuzzleToLoad(localPuzzles[index])\r\n                    }}>\r\n                        Link\r\n                    </Link>\r\n\r\n                    <div>\r\n                        {puzzle}\r\n                    </div>\r\n                </Paper>\r\n            )\r\n        })\r\n    )   \r\n}\r\n\r\n// Exports\r\nexport default LoadPuzzle\r\n\r\n","// Unreserved URL chars, as declared by section 2.3 of RFC 3986 \r\n// (see https://www.ietf.org/rfc/rfc3986.txt for more). All used except the \r\n// period, which is used to denote each line of the encoded sudoku. Lines \r\n// encoded separately to avoid reaching integer limit of javascript, and thus \r\n// not being able to encode or decode the puzzle correctly due to integer \r\n// accuracy at larger values such as would be produced by turning an entire \r\n// sudoku into one long number.\r\nconst base65Dict = \"0123456789\" +\r\n    \"abcdefghijklmnopqrstuvwxyz\" + \r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\" + \r\n    \"-_~\"\r\n\r\n// Calls to encode or decode are NOT checked to verify if they are in the format\r\n// of a sudoku. These checks should be made by the client if required, and are \r\n// not included here because sudokus can be in different formats, and an invalid\r\n// sudoku does not prevent the encoding/decoding functions from working.\r\nconst encode = (solutionString = \"\", puzzleString = \"\") => {\r\n    // Preventing error being thrown in the event that no args are passed (for\r\n    // example if a hook calls this method on an empty global context)\r\n    if (solutionString === \"\" || puzzleString === \"\") {\r\n        return\r\n    }\r\n    const solutionRows = toRows(solutionString)\r\n    const puzzleRows = toRows(puzzleString)\r\n    // Find where clues are by index in each row\r\n    const clueLocations = puzzleRows.map(row => {\r\n        return row.split(\"\").reduce((acc, cur, index) => {\r\n            // Note that acc is a string, hence acc + (index + 1) does not add\r\n            // the values together, but concatenates them instead. Index + 1 \r\n            // must be added to avoid adding index = 0, which results in no\r\n            // change to the acc value.\r\n            return cur === \"0\" ? acc : acc + (index + 1)         \r\n        }, \"\")\r\n    })\r\n    // Encode the solution and clue positions, with rows separated by a period\r\n    return clueLocations.map((value, index) => {\r\n        // Encoded solution and encoded clue positions may be concatenated, \r\n        // since the highest and lowest values a row in sudoku may take in\r\n        // sudoku (987654321, and 123456789 respectively) both encode to a 5\r\n        // char 65-bit value, so may be decoded by spliting at the 5th char\r\n        return [encodeBase65(solutionRows[index]) + encodeBase65(value)]\r\n    }).reduce((acc, cur) => {\r\n        return acc + \".\" + cur\r\n    })\r\n}\r\n\r\nconst decode = (encoded = \"\") => {\r\n    // Default arg preventing error being thrown in the event that no args are \r\n    // passed (for example if a hook calls this method on an empty global \r\n    // context) decode will return \"0\" in this case\r\n    // Split into rows and clue positions, as indicated by periods and 5th char,\r\n    // and return the decoded values\r\n    const decoded = encoded.split(\".\").map(encoded => {\r\n        return [encoded.slice(0,5), encoded.slice(5)].map(val => {\r\n            return decodeBase65(val)\r\n        })\r\n    })\r\n    // Concatenate rows into a solutionString\r\n    const solutionString = decoded.reduce((acc, cur) => {\r\n        return acc + cur[0]\r\n    }, [])\r\n    // Replace 0s in the puzzle string, and replace clue indexes with the\r\n    // correct clue values from decoded rows\r\n    const puzzleString = decoded.reduce((acc, cur) => {\r\n        return acc + cur[0].toString().split(\"\").map((value, index) => {\r\n            return cur[1].toString().split(\"\").includes(\r\n                (index + 1).toString()) ? value : 0\r\n        }).join(\"\")\r\n    }, [])\r\n    return [solutionString, puzzleString]\r\n}\r\n\r\nconst encodeBase65 = (decimal, base65 = \"\", exponent = null) => {\r\n    // Returns false when decimal goes to 0\r\n    if (!decimal) {\r\n        return base65\r\n    } if (exponent == null) {\r\n        // Finding largest exponent required for encoding/decoding\r\n        return encodeBase65 (decimal, base65, floorLogBase(decimal))\r\n    } else {\r\n        const power = 65 ** exponent\r\n        const exponentCoefficient = Math.floor(\r\n            decimal / power\r\n        )\r\n        // Recursively encode/decode, by reducing/increasing the decimal, and \r\n        // encoded values where appropriate, reducing the exponent each time\r\n        return encodeBase65 (\r\n            decimal - (exponentCoefficient * power),\r\n            base65 + base65Dict[exponentCoefficient],\r\n            exponent - 1\r\n        )\r\n    }\r\n}\r\n\r\nconst decodeBase65 = (base65, decimal = 0, exponent = null) => {\r\n    if (base65 === \"\") {\r\n        return decimal\r\n    } if (exponent == null) {\r\n        // Finding largest exponent required for encoding/decoding\r\n        return decodeBase65 (base65, decimal, base65.length - 1)\r\n    } else {\r\n        const power = 65 ** exponent\r\n        const exponentCoefficient = base65Dict.indexOf(base65[0])\r\n        // Recursively encode/decode, by reducing/increasing the decimal, and \r\n        // encoded values where appropriate, reducing the exponent each time\r\n        return decodeBase65 (\r\n            base65.slice(1),\r\n            decimal + (exponentCoefficient * power),\r\n            exponent - 1\r\n        )\r\n    }\r\n}\r\n\r\n// Convert a sudoku string to an array of its rows. chunkSize defaulted to 9 to\r\n// reflect normal size of sudoku.\r\nconst toRows = (string, chunkSize = 9, result = []) => {\r\n    if (string.length === 0) {\r\n        return result\r\n    } else {\r\n        result.push(string.slice(0, chunkSize))\r\n        return toRows(\r\n            string.slice(chunkSize), \r\n            chunkSize, \r\n            result        \r\n        )\r\n    }\r\n}\r\n\r\n// base value defaulted to 65 given that sudoku is encoded with 65 unreserved\r\n// URL chars\r\nconst floorLogBase = (number, base = 65) => {\r\n    return Math.floor(\r\n        Math.log(number) / Math.log(base)\r\n    )\r\n}\r\n\r\n// Exports\r\nexport {\r\n    encode, \r\n    decode\r\n}","// General imports\r\nimport React, {\r\n    useState\r\n} from \"react\"\r\n\r\n// Material-ui imports\r\nimport {\r\n    TextField,\r\n    Button\r\n} from \"@material-ui/core\"\r\n\r\n// Own imports\r\n// import GlobalContext from \"../context/Global\"\r\nimport { \r\n    encode,\r\n    decode\r\n} from \"../functions/sudokuEncode\"\r\n\r\n// Component\r\nconst SetPuzzle = () => {\r\n    // const context = useContext(GlobalContext)\r\n    const [solution, setSolution] = useState(\"\")\r\n    const [puzzle, setPuzzle] = useState(\"\")\r\n\r\n    const SOLUTION = \"SOLUTION\"\r\n    const PUZZLE = \"PUZZLE\"\r\n    const handleChange = field => event => {\r\n        switch (field) {\r\n            case SOLUTION: \r\n                return setSolution(event.target.value)\r\n            case PUZZLE:\r\n                return setPuzzle(event.target.value)\r\n            default:\r\n                return\r\n        }\r\n    }\r\n    \r\n    const result = (solution, puzzle) => {\r\n        if (solution !== \"\" && puzzle !== \"\") {\r\n            return encode(solution, puzzle)\r\n        }\r\n        else {\r\n            return\r\n        }\r\n    }\r\n\r\n    const storePuzzle = encodedOriginal => {\r\n        const puzzle = decode(encodedOriginal)[1].split(\"\")\r\n        const solution = decode(encodedOriginal)[0].split(\"\")\r\n        const answer = puzzle\r\n        const candidates = puzzle.map(() => [])\r\n        const encodedAnswer = encodedOriginal\r\n        // encodedOriginal stored as key in local storage, as this is a\r\n        // unique reference to the puzzle, which will cause the value to\r\n        // be overwritten each time the client comes back to the puzzle\r\n        // and makes changes to the answer.\r\n        return localStorage.setItem(encodedOriginal, JSON.stringify({\r\n            // Original stored incase client wants to restart\r\n            puzzle: puzzle,\r\n            solution: solution,\r\n            answer: answer,\r\n            candidates: candidates,\r\n            encodedOriginal: encodedOriginal,\r\n            encodedAnswer: encodedAnswer,\r\n            lastActive: new Date()\r\n        }))\r\n        \r\n    }\r\n\r\n    // Component render JSX\r\n    return (\r\n        <div>\r\n            <form className={\"FILL\"} noValidate autoComplete=\"off\">\r\n                <TextField\r\n                    className = {\"FILL\"}\r\n                    label = \"Solution\"\r\n                    onChange = {handleChange(SOLUTION)}\r\n                    margin = \"normal\"\r\n                    type = \"number\"\r\n                    variant = \"outlined\"\r\n                />\r\n                <TextField \r\n                    className = {\"FILL\"}\r\n                    label = \"Puzzle\"\r\n                    onChange = {handleChange(PUZZLE)}\r\n                    margin = \"normal\"\r\n                    type = \"number\"\r\n                    variant = \"outlined\"\r\n                />\r\n            </form>\r\n            {result(solution, puzzle)}\r\n            <Button className = {\"FILL\"} onClick = {() => storePuzzle(result(solution, puzzle))}>\r\n                Save\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Exports\r\nexport default SetPuzzle","// Return index in range 0-80, such that the index wraps the rows and \r\n// columns of the sudoku, and is not an index occupied by a clue of the\r\n// sudoku puzzle\r\n// Available wrapTypes - describes where index wraps TO\r\nexport const TO_ROW_END = \"TO_ROW_END\"\r\nexport const TO_ROW_START = \"TO_ROW_START\"\r\nexport const TO_COLUMN_START = \"TO_COLUMN_START\"\r\nexport const TO_COLUMN_END = \"TO_COLUMN_END\"\r\nexport const rectifyIndex = (index, wrapType, puzzle) => {\r\n    // Cause index to wrap back to end/start of column/row\r\n    const wrapIndex = num => {\r\n        switch (wrapType) {\r\n            case TO_ROW_END:\r\n                return num % 9 === 0 ? num + 8 : num - 1\r\n            case TO_ROW_START:\r\n                return num % 9 === 8 ? num - 8 : num + 1\r\n            // NOTE different equalities on TO_COLUMN_END and TO_COLUMN_START\r\n            // these are correct!\r\n            case TO_COLUMN_END:\r\n                return num / 9 < 1 ? num + 72 : num - 9\r\n            case TO_COLUMN_START:\r\n                return num / 9 >= 8 ? num - 72 : num + 9\r\n            default:\r\n                return\r\n        }\r\n    }\r\n    // Repeatedly apply wrapIndex, until the result is not a set clue of \r\n    // the puzzle, which users should not be able to interact with\r\n    const noClueAtIndex = num => {\r\n        const nextIndex = wrapIndex(num)\r\n        if (puzzle[nextIndex] === \"0\") {\r\n            return nextIndex\r\n        } else {\r\n            return noClueAtIndex(nextIndex)\r\n        }\r\n    }\r\n    return noClueAtIndex(index)\r\n}\r\n\r\n","// General imports\r\nimport {\r\n    useContext,\r\n    useEffect\r\n} from \"react\"\r\nimport {\r\n    fromEvent\r\n} from \"rxjs\"\r\n\r\n// Own imports \r\n    //Context\r\n    import MainContext from \"../context/Main\"\r\n    import GlobalContext from \"../context/Global\"\r\n    // Components\r\n    // Hooks\r\n    // Style hooks\r\n    // Other\r\n    import {\r\n        TO_ROW_END,\r\n        TO_ROW_START,\r\n        TO_COLUMN_START,\r\n        TO_COLUMN_END,\r\n        rectifyIndex\r\n    } from \"../functions/rectifyIndex\"\r\n\r\n// Custom hooks\r\nconst useWatchKey = () => {\r\n    // Context & state\r\n    const context = useContext(GlobalContext)\r\n    const mainContext = useContext(MainContext)\r\n\r\n    // Lifecycle\r\n    useEffect(() => {\r\n        // Allows client to navigate puzzle with WASD keys using rxjs \r\n        // observable, such that permanent clues are skipped over, and at the\r\n        // ends of rows/columns, the client is wrapped back to the other end\r\n        // of the row/column \r\n        const watchKey = \r\n            fromEvent(document, \"keypress\").subscribe(event => {\r\n                event.stopImmediatePropagation()\r\n                // Circumvent users having caps lock on etc. and makes cases\r\n                // easier to read.\r\n                const letter = event.key.toUpperCase()\r\n                const index = mainContext.selectedCell\r\n                // Watching keys for when the test dialog is open, and the\r\n                // client must select an option from 3 choices\r\n                if (mainContext.currentDialog === mainContext.dialogs.TEST) {\r\n                    switch (letter) {\r\n                        case \"1\":\r\n                            return mainContext.deleteTest()\r\n                        case \"2\":\r\n                            return mainContext.removeInitCandidate()\r\n                        case \"3\":\r\n                            return mainContext.testToAnswer()\r\n                        default:\r\n                            return\r\n                    }\r\n                } \r\n                // Do nothing if these dialogs are open (dialog has autoFocus on\r\n                // accept, and may be closed using the esc key)\r\n                else if (mainContext.currentDialog !== null) {\r\n                        return                            \r\n                } else {\r\n                    switch (letter) {\r\n                        // Watching for cell selected keys\r\n                        case \"W\":\r\n                            return mainContext.setSelectedCell(rectifyIndex(\r\n                                index,\r\n                                TO_COLUMN_END,\r\n                                context.puzzle\r\n                            ))\r\n                        case \"A\":\r\n                            return mainContext.setSelectedCell(rectifyIndex(\r\n                                index,\r\n                                TO_ROW_END,\r\n                                context.puzzle\r\n                            ))\r\n                        case \"S\":\r\n                            return mainContext.setSelectedCell(rectifyIndex(\r\n                                index,\r\n                                TO_COLUMN_START,\r\n                                context.puzzle\r\n                            ))\r\n                        case \"D\":\r\n                            return mainContext.setSelectedCell(rectifyIndex(\r\n                                index,\r\n                                TO_ROW_START,\r\n                                context.puzzle\r\n                            ))\r\n                        // Watching for operation selector keys\r\n                        case \"R\":\r\n                            return mainContext.handleRemoveCell()\r\n                        case \"0\":\r\n                            return mainContext.handleRemoveCell()\r\n                        case \"F\":\r\n                            return mainContext.handleGiveAnswer()\r\n                        case \"C\":\r\n                            return mainContext.handleCheck()\r\n                        case \"Z\":\r\n                            // Client must confirm action before it is executed,\r\n                            // as this action may overwrite user progress. \r\n                            // Confirmed with popup dialog rendered by \r\n                            // SolvePuzzle\r\n                            return mainContext.setCurrentDialog(\r\n                                mainContext.dialogs.RESTART)\r\n                        case \"X\":\r\n                            // Client must confirm action before it is executed,\r\n                            // as this action may overwrite user progress. \r\n                            // Confirmed with popup dialog rendered by \r\n                            // SolvePuzzle\r\n                            return mainContext.setCurrentDialog(\r\n                                mainContext.dialogs.POPULATE_CANDIDATES)\r\n                        // Watching for input selector keys\r\n                        case \"Q\":\r\n                            return mainContext.setInputMethod(\r\n                                mainContext.methods.ANSWER)\r\n                        case \"E\":\r\n                            return mainContext.setInputMethod(\r\n                                mainContext.methods.CANDIDATES)\r\n                        case \"V\":\r\n                            // If V pressed when TEST is already selected, then \r\n                            // dialog for dealing with test values should be\r\n                            // displayed\r\n                            return mainContext.inputMethod === \r\n                            mainContext.methods.TEST ?\r\n                                mainContext.setCurrentDialog(\r\n                                    mainContext.dialogs.TEST) :\r\n                                mainContext.setInputMethod(\r\n                                    mainContext.methods.TEST)\r\n                        // Key was a number from 1-9, or another unused key\r\n                        default:\r\n                            // Sets answer, candidate, or test in selected cell,\r\n                            // note that answer, candidate, and test reducers \r\n                            // ignore invalid chars\r\n                            return mainContext.handleChange(event.key) \r\n                    }\r\n                }\r\n            })\r\n        return () => {\r\n            watchKey.unsubscribe()\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [\r\n        mainContext.selectedCell, mainContext.inputMethod, \r\n        mainContext.currentDialog, context.answer, context.candidates, \r\n        context.test\r\n    ])\r\n}\r\n\r\n// Exports\r\nexport default useWatchKey\r\n","/*Follow the order laid out below in all relevant JS files - just copy this, \r\nor another template file to get going!*/\r\n\r\n// General imports\r\nimport React from \"react\"\r\n\r\n// Material-ui imports\r\nimport { \r\n    Paper\r\n} from \"@material-ui/core\"\r\n\r\n// Own imports \r\n    //Context\r\n    // Components\r\n    import {\r\n        SudokuGrid,\r\n        InputSelector,\r\n        NumberSelector,\r\n        OperationSelector,\r\n        CheckDialog,\r\n        RestartDialog,\r\n        PopulateDialog,\r\n        TestDialog\r\n    } from \"../components/exports\"\r\n    // Hooks\r\n    import useWatchKey from \"../hooks/watchKey\"\r\n    // Style hooks\r\n\r\n// Component\r\nconst SolvePuzzle = props => {\r\n    // State and context\r\n\r\n    // Styles\r\n    const styles = props.styles\r\n\r\n    // Single rxjs observable for all keyboard inputs\r\n    useWatchKey()\r\n\r\n    // Component render JSX\r\n    return (\r\n        <div>\r\n            <Paper className = {styles.solverContainer}>\r\n                \r\n                <OperationSelector styles = {styles} />\r\n                <CheckDialog styles = {styles} />\r\n                <RestartDialog styles = {styles} />\r\n                <PopulateDialog styles = {styles} />  \r\n                <TestDialog styles = {styles} />                  \r\n            \r\n                <InputSelector styles = {styles} />\r\n\r\n                <SudokuGrid styles = {styles} />\r\n            \r\n                <NumberSelector styles = {styles} />\r\n\r\n            </Paper>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n// Exports\r\nexport default SolvePuzzle","// General imports\r\n\r\n// Own imports\r\n    // Variables\r\n    import variables from \"../index.scss\"\r\n\r\n// Styles\r\nconst gridStyles = {\r\n    answer: props => ({\r\n        color: variables.neutralColor1,\r\n        // Found that rem unit did not size digits aggressively enough to fit\r\n        // numbers correctly at smaller sizes\r\n        fontSize: `${props.responsiveSize / 1.5}px`,\r\n        display: \"flex\", // For aliging text!\r\n        justifyContent: \"center\", // Align horizontal\r\n        alignItems: \"center\", // Align vertical\r\n        border: `1.5px solid ${variables.neutralColor1}`,\r\n        margin: \"0px\",\r\n        boxSizing: \"border-box\", // Prevent increased element size with padding\r\n        padding: props.responsiveSize / 10,\r\n        width: props.responsiveSize,\r\n        height: props.responsiveSize\r\n    }),\r\n    candidate: props => ({\r\n        color: variables.neutralColor1,\r\n        // Found that rem unit did not size digits aggressively enough to fit \r\n        // 9 candidates at smaller sizes\r\n        fontSize: `${props.responsiveSize / 5}px`,\r\n        lineHeight: `${props.responsiveSize / 3.75}px`,\r\n        letterSpacing: `${props.responsiveSize / 22}px`,\r\n        display: \"flex\", // For alinging text!\r\n        flexWrap: \"wrap\",\r\n        justifyContent: \"center\", // Align horizontal\r\n        alignItems: \"center\", // Align vertical\r\n        border: `1.5px solid ${variables.neutralColor1}`,\r\n        margin: \"0px\",\r\n        boxSizing: \"border-box\", // Prevent increased element size with padding\r\n        padding: props.responsiveSize / 10,  \r\n        width: props.responsiveSize,\r\n        height: props.responsiveSize\r\n    }),\r\n    puzzle: props => ({\r\n        color: variables.neutralColor7,\r\n        // Found that rem unit did not size digits aggressively enough to fit\r\n        // numbers correctly at smaller sizes\r\n        fontSize: `${props.responsiveSize / 1.5}px`,\r\n        display: \"flex\", // For aliging text!\r\n        justifyContent: \"center\", // Align horizontal\r\n        alignItems: \"center\", // Align vertical\r\n        border: `1.5px solid ${variables.neutralColor1}`,\r\n        margin: \"0px\",\r\n        boxSizing: \"border-box\", // Prevent increased element size with padding\r\n        padding: props.responsiveSize / 10,\r\n        width: props.responsiveSize,\r\n        height: props.responsiveSize\r\n    }),\r\n    test: props => ({\r\n        // Found that rem unit did not size digits aggressively enough to fit\r\n        // numbers correctly at smaller sizes\r\n        fontSize: `${props.responsiveSize / 1.5}px`,\r\n        display: \"flex\", // For aliging text!\r\n        justifyContent: \"center\", // Align horizontal\r\n        alignItems: \"center\", // Align vertical\r\n        border: `1.5px solid ${variables.neutralColor1}`,\r\n        margin: \"0px\",\r\n        boxSizing: \"border-box\", // Prevent increased element size with padding\r\n        padding: props.responsiveSize / 10,\r\n        width: props.responsiveSize,\r\n        height: props.responsiveSize\r\n    }),\r\n    first: {\r\n        color: variables.redHighlight9\r\n    },\r\n    remainder: {\r\n        color: variables.greenHighlight6\r\n    },\r\n    row: props => ({\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"center\", // Align horizontal\r\n        alignItems: \"center\", // Align vertical\r\n        width: props.responsiveSize * 10,\r\n        height: props.responsiveSize\r\n    }),\r\n    light: {\r\n        backgroundColor: variables.primaryColor2\r\n    },\r\n    dark: {\r\n        backgroundColor: variables.primaryColor4\r\n    },\r\n    selected: {\r\n        backgroundColor: variables.neutralColor4\r\n    }\r\n}\r\n\r\n// Exports\r\nexport default gridStyles","// General imports\r\n\r\n// Own imports\r\n    // Variables\r\n    import variables from \"../index.scss\"\r\n\r\n// Styles - Green, red, and yellow dialog background themes for notification,\r\n// alerts, and or errors\r\nconst dialogStyles = {\r\n    // Red theme\r\n    errorDialog: {\r\n        \"& div.MuiDialogTitle-root\": {\r\n            color: variables.neutralColor1,\r\n            backgroundColor: variables.redHighlight4,\r\n        },\r\n        \"& div.MuiDialogContent-root\": {\r\n            \"& p.MuiDialogContentText-root\": {\r\n                color: variables.neutralColor6,\r\n            },            \r\n            backgroundColor: variables.redHighlight4,\r\n        },\r\n        \"& div.MuiDialogActions-root\": {\r\n            \"& span.MuiButton-label\": {\r\n                color: variables.neutralColor1\r\n            },\r\n            backgroundColor: variables.redHighlight4,\r\n        }\r\n    },\r\n\r\n    // Yellow theme\r\n    cautionDialog: {\r\n        \"& div.MuiDialogTitle-root\": {\r\n            color: variables.neutralColor11,\r\n            backgroundColor: variables.yellowHighlight1,\r\n        },\r\n        \"& div.MuiDialogContent-root\": {\r\n            \"& p.MuiDialogContentText-root\": {\r\n                color: variables.neutralColor8,\r\n            },            \r\n            backgroundColor: variables.yellowHighlight1,\r\n        },\r\n        \"& div.MuiDialogActions-root\": {\r\n            \"& span.MuiButton-label\": {\r\n                color: variables.neutralColor11\r\n            },\r\n            backgroundColor: variables.yellowHighlight1,\r\n        }\r\n    },\r\n\r\n    // Green theme\r\n    notificationDialog: {\r\n        \"& div.MuiDialogTitle-root\": {\r\n            color: variables.neutralColor11,\r\n            backgroundColor: variables.greenHighlight1,\r\n        },\r\n        \"& div.MuiDialogContent-root\": {\r\n            \"& p.MuiDialogContentText-root\": {\r\n                color: variables.neutralColor8,\r\n            },            \r\n            backgroundColor: variables.greenHighlight1,\r\n        },\r\n        \"& div.MuiDialogActions-root\": {\r\n            \"& span.MuiButton-label\": {\r\n                color: variables.neutralColor11\r\n            },\r\n            backgroundColor: variables.greenHighlight1,\r\n        },\r\n        \"& li\": {\r\n            color: variables.neutralColor8\r\n        }\r\n    }\r\n}\r\n\r\n// Exports\r\nexport default dialogStyles","// General imports\r\n\r\n// Material-ui imports\r\nimport { \r\n    makeStyles\r\n} from \"@material-ui/styles\"\r\n\r\n// Own imports\r\n    // Variables\r\n    import variables from \"../index.scss\"\r\n    // Other JSS files\r\n    import {\r\n        gridStyles,\r\n        dialogStyles\r\n    } from \"../jss/exports\"\r\n\r\n// Styles\r\nconst useMainStyles = makeStyles({\r\n    // Insert imported JSS styles\r\n    ...gridStyles,\r\n    ...dialogStyles,\r\n    // Styling on parent component\r\n    main: props => ({\r\n        // Found that rem unit did not size margins aggressively enough to fit\r\n        // correctly at smaller sizes\r\n        padding: `${props.responsiveSize / 2}px \r\n            ${props.responsiveSize / 2}px`,\r\n        margin: \"auto\",\r\n        justifyContent: \"center\"\r\n    }),\r\n    solverContainer: props => ({\r\n        display: \"grid\",\r\n        backgroundColor: variables.secondaryColor1,\r\n        height: props.responsiveSize * 13,\r\n        width: props.responsiveSize * 10,\r\n        placeItems: \"center center\",\r\n        margin: \"auto\",\r\n        gridTemplateColumns: \"4% 55% 34% 4%\",\r\n        gridTemplateRows: \"4% 8% 72% 8% 4%\",\r\n        gridColumnGap: \"1%\",\r\n        gridRowGap: \"1%\",\r\n        gridTemplateAreas: `\r\n            \".  .           .           .\"\r\n            \".  operation   input       .\"\r\n            \".  sudoku      sudoku      .\"\r\n            \".  number      number      .\"\r\n            \".  .           .           .\"\r\n        `\r\n    }),\r\n\r\n    // Styling applied to all buttonGroups\r\n    buttonGroup: props => ({\r\n        \"& button\": {\r\n            color: variables.neutralColor3,\r\n            backgroundColor: variables.secondaryColor8,\r\n            // Found that rem unit did not size digits aggressively enough to\r\n            // fit numbers correctly at smaller sizes\r\n            fontSize: `${props.responsiveSize / 2.5}px`,\r\n            width: props.responsiveSize,\r\n            height: props.responsiveSize\r\n        },\r\n        // Interactive colors\r\n        \"& button.Mui-selected\": {\r\n            color: variables.neutralColor5,\r\n            backgroundColor: variables.secondaryColor11\r\n        },\r\n        \"& button.Mui-selected:hover\": {\r\n            color: variables.neutralColor5,\r\n            backgroundColor: variables.secondaryColor11\r\n        },\r\n        \"& button:hover\": {\r\n            color: variables.neutralColor1,\r\n            backgroundColor: variables.secondaryColor4\r\n        }\r\n    }),\r\n\r\n    // Custom styling specific to each button group\r\n    numberSelector: props => ({\r\n        gridArea: \"number\"\r\n    }),\r\n    operationSelector: props => ({\r\n        gridArea: \"operation\"\r\n    }),\r\n    inputSelector: props => ({\r\n        gridArea: \"input\"\r\n    }),\r\n\r\n    // Other styling\r\n    sudoku: props => ({\r\n        gridArea: \"sudoku\"\r\n    }),\r\n    dialog: props => ({\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignContent: \"center\",\r\n        flexWrap: \"wrap\",\r\n        padding: \"1.3rem\",\r\n        width: props.responsiveSize * 4\r\n    })\r\n})\r\n\r\n// Exports\r\nexport default useMainStyles","//General imports\r\nimport React, {\r\n    useContext,\r\n    useEffect\r\n} from \"react\"\r\n/*eslint-disable no-unused-vars*/\r\nimport { \r\n    /*Router must be imported for its functionality to work, even though the \r\n    Router component wraps the parent App component.*/\r\n    BrowserRouter as Router, Route, Redirect, Switch\r\n} from \"react-router-dom\"\r\n/*eslint-enable no-unused-vars*/\r\n\r\n//Material-ui imports\r\n\r\n// Own imports \r\n    //Context & States\r\n    import MainContext from \"../context/Main\"\r\n    // Components\r\n    import {\r\n        Instructions,\r\n        LoadPuzzle,\r\n        SetPuzzle,\r\n        SolvePuzzle\r\n    } from \"../pages/exports\"\r\n    // Hooks\r\n    import useWindowSize from \"../hooks/windowSize\"\r\n    // Style hooks\r\n    import useMainStyles from \"../styles/hooks/main\"\r\n    // Other\r\n\r\n// Component\r\nconst Main = () => {\r\n    // State & context\r\n    const mainContext = useContext(MainContext)\r\n\r\n    // Styles - called in top level, then passed as props to children of the\r\n    // main component, so that the props are only set in one place\r\n    const styles = useMainStyles({\r\n        responsiveSize: mainContext.responsiveSize\r\n    })\r\n\r\n    // Update mainContext responsiveSize upon change of screen size - used for \r\n    // scaling display elements such as sudoku grids in SolveSudoku and \r\n    // LoadSudoku pages\r\n    const size = useWindowSize()\r\n    useEffect(() => {\r\n        mainContext.setResponsiveSize()\r\n    }, [mainContext, size])\r\n\r\n    return (\r\n        <div className = {styles.main}>\r\n        \r\n            <Switch>\r\n\r\n                {/*Links to Route components below are rendered by the Header \r\n                component, so parent Router component wraps entire App component\r\n                instead. Note that child components must not be rendered using \r\n                the render callback of a Route component, as this will prevent\r\n                the use of hooks within those child components!*/}\r\n                <Route exact path = \"/\">\r\n                    <SolvePuzzle styles = {styles} />\r\n                </Route>\r\n\r\n                <Route path = \"/solve\">\r\n                    <SolvePuzzle styles = {styles} />\r\n                </Route>\r\n\r\n                <Route path = \"/instructions\">\r\n                    <Instructions styles = {styles} />\r\n                </Route>\r\n\r\n                <Route path = \"/load\">\r\n                    <LoadPuzzle styles = {styles} />\r\n                </Route>\r\n\r\n                <Route path = \"/set\">\r\n                    <SetPuzzle styles = {styles} />\r\n                </Route>\r\n                \r\n            </Switch>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main","// General imports\r\nimport React, {\r\n    useContext\r\n} from \"react\"\r\n\r\n// Material-ui imports\r\nimport {\r\n    Tooltip,\r\n} from \"@material-ui/core\"\r\nimport {\r\n    Add,\r\n    LiveHelp,\r\n    CallSplit\r\n} from \"@material-ui/icons\"\r\nimport {\r\n    ToggleButton,\r\n    ToggleButtonGroup,\r\n} from \"@material-ui/lab\"\r\n\r\n// Own imports \r\n    //Context\r\n    import MainContext from \"../../context/Main\"\r\n    // Components\r\n    // Hooks\r\n    // Style hooks\r\n\r\n// Component\r\nconst InputSelector = props => {\r\n    // State and context\r\n    const mainContext = useContext(MainContext)\r\n\r\n    // Styles\r\n    const styles = props.styles\r\n\r\n    // Component render JSX\r\n    return (\r\n        <ToggleButtonGroup\r\n            value = {mainContext.inputMethod}\r\n            onChange = {(event, method) => {\r\n                // Returns null if client clicks the already selected\r\n                // input method.\r\n                if (method === null && \r\n                    mainContext.inputMethod === mainContext.methods.TEST) {\r\n                    // If test button pressed when TEST is already selected, \r\n                    // then dialog for dealing with test values should be\r\n                    // displayed\r\n                    mainContext.setCurrentDialog(mainContext.dialogs.TEST)\r\n                } else if (method === null) {\r\n                    return\r\n                } else {\r\n                    mainContext.setInputMethod(method)\r\n                }                    \r\n            }}\r\n            exclusive\r\n            size = \"small\"\r\n            className = {`${styles.buttonGroup} ${styles.inputSelector}`}\r\n        >\r\n        \r\n            <ToggleButton  value = {mainContext.methods.ANSWER}>    \r\n                <Tooltip title = \"Insert answers (Q)\">           \r\n                    <Add />        \r\n                </Tooltip>        \r\n            </ToggleButton>\r\n            \r\n            <ToggleButton value = {mainContext.methods.CANDIDATES}>\r\n                <Tooltip title = \"Insert candidates (E)\">\r\n                    <LiveHelp />\r\n                </Tooltip>\r\n            </ToggleButton>\r\n\r\n            <ToggleButton value = {mainContext.methods.TEST}>\r\n                <Tooltip title = \"Test a candidate (V)\">\r\n                    <CallSplit />\r\n                </Tooltip>\r\n            </ToggleButton>\r\n\r\n        </ToggleButtonGroup>\r\n    )\r\n}\r\n\r\n// Exports\r\nexport default InputSelector","// General imports\r\nimport React, {\r\n    useContext\r\n} from \"react\"\r\n\r\n// Material-ui imports\r\nimport {\r\n    ToggleButton,\r\n    ToggleButtonGroup\r\n} from \"@material-ui/lab\"\r\n\r\n// Own imports \r\n    //Context\r\n    import MainContext from \"../../context/Main\"\r\n    import GlobalContext from \"../../context/Global\"\r\n    // Components\r\n    // Hooks\r\n    // Style hooks\r\n\r\n// Component\r\nconst NumberSelector = props => {\r\n    // State and context\r\n    const context = useContext(GlobalContext)\r\n    const mainContext = useContext(MainContext)\r\n\r\n    // Styles\r\n    const styles = props.styles    \r\n\r\n    // Pre-render components\r\n    // 1-9 number bar group for input of answers and candidates\r\n    const numbers = []\r\n    for (let number = 1; number < 10; number++) {\r\n        numbers.push(\r\n            <ToggleButton\r\n                value = {`${number}`}\r\n                key = {number}\r\n                onClick = {() => mainContext.handleChange(number)}\r\n            >\r\n                {number}\r\n            </ToggleButton>\r\n        )\r\n    }\r\n\r\n    // Component render JSX\r\n    return (\r\n        <ToggleButtonGroup \r\n                value = {\r\n                    context.answer[mainContext.selectedCell] === \"0\" ? \r\n                        (\r\n                        context.test[mainContext.selectedCell] === \"0\" ?\r\n                            context.candidates[mainContext.selectedCell] : \r\n                            context.test[mainContext.selectedCell]\r\n                        ) :\r\n                        context.answer[mainContext.selectedCell]\r\n                }\r\n                size = \"small\"\r\n                className = {`${styles.buttonGroup} ${styles.numberSelector}`}\r\n            >\r\n                {numbers}\r\n        </ToggleButtonGroup>\r\n    )\r\n}\r\n\r\n// Exports\r\nexport default NumberSelector","// General imports\r\nimport React, {\r\n    useContext\r\n} from \"react\"\r\n\r\n// Material-ui imports\r\nimport { \r\n    Button, \r\n    ButtonGroup,\r\n    Tooltip\r\n} from \"@material-ui/core\"\r\nimport {\r\n    Remove,\r\n    Check,\r\n    Visibility,\r\n    Replay,\r\n    Apps\r\n} from \"@material-ui/icons\"\r\n\r\n// Own imports \r\n    //Context\r\n    import MainContext from \"../../context/Main\"\r\n    // Components\r\n    // Hooks\r\n    // Style hooks\r\n\r\n// Component\r\nconst OperationSelector = props => {\r\n    // State and context\r\n    const mainContext = useContext(MainContext)\r\n\r\n    // Styles\r\n    const styles = props.styles\r\n\r\n    // Component render JSX\r\n    return (\r\n        <ButtonGroup \r\n            size = \"small\"\r\n            className = {`${styles.buttonGroup} ${styles.operationSelector}`}\r\n        >\r\n\r\n            <Button \r\n                onClick = {() => mainContext.handleRemoveCell()}\r\n                className = {styles.button}\r\n            >\r\n                <Tooltip title = \"Remove a cell (R)\">\r\n                    <Remove className = {styles.button} />\r\n                </Tooltip>\r\n            </Button>\r\n            \r\n            <Button \r\n                onClick = {() => mainContext.handleGiveAnswer()}\r\n                className = {styles.button}\r\n            >\r\n                <Tooltip title = \"See an answer (F)\">\r\n                    <Visibility />\r\n                </Tooltip>\r\n            </Button>\r\n            \r\n            <Button \r\n                onClick = {() => mainContext.handleCheck()}\r\n                className = {styles.button}\r\n            >\r\n                <Tooltip title = \"Check your answers (C)\">\r\n                    <Check />\r\n                </Tooltip>\r\n            </Button>\r\n            \r\n            <Button \r\n                onClick = {() => mainContext.setCurrentDialog(\r\n                    mainContext.dialogs.RESTART)}\r\n                className = {styles.button}\r\n            >\r\n                <Tooltip title = \"Restart (Z)\">\r\n                    <Replay className = {styles.button} />\r\n                </Tooltip>\r\n            </Button>\r\n            \r\n            <Button \r\n                onClick = {() => mainContext.setCurrentDialog(\r\n                    mainContext.dialogs.POPULATE_CANDIDATES)}\r\n                className = {styles.button}\r\n            >\r\n                <Tooltip title = \"Add all candidates (X)\">\r\n                    <Apps className = {styles.button} />\r\n                </Tooltip>\r\n            </Button>\r\n\r\n        </ButtonGroup>\r\n    )\r\n}\r\n\r\n// Exports\r\nexport default OperationSelector","// General imports\r\nimport { \r\n    useContext\r\n} from \"react\"\r\n\r\n// Own imports\r\n    // Context\r\n    import GlobalContext from \"../context/Global\"\r\n    import MainContext from \"../context/Main\"\r\n\r\n// Custom hook - returns index closest to the center cell (index 40), which is\r\n// not populated by a clue of the puzzle\r\nconst useInitSelectedPuzzle = () => {\r\n    // State and context\r\n    const context = useContext(GlobalContext)\r\n    const mainContext = useContext(MainContext)\r\n\r\n    // Do not bother to set an initial selectedCell if the puzzle in global\r\n    // context is not of valid format, or if puzzle === solution, since there\r\n    // will be no position for the selectedCell, or if a selected cell is \r\n    // already set\r\n    const solution = context.solution\r\n    const puzzle = context.puzzle\r\n    const answer = context.answer\r\n    const candidates = context.candidates\r\n    if (         \r\n        // Most likely case at top! - CAUTION selectedCell may be 0 (evaluates\r\n        // to false)\r\n        mainContext.selectedCell != null ||\r\n        solution.length !== 81 || \r\n        puzzle.length !== 81 || \r\n        answer.length !== 81 ||\r\n        candidates.length !== 81 ||\r\n        solution === puzzle\r\n    ) {\r\n        // Do not return error - client will indicate that no sudoku has been\r\n        // loaded, since the new puzzle will not be rendered in the SolvePuzzle\r\n        // page.\r\n        return\r\n    } else {\r\n        // Returns number in range 1-4 indicating how far the given index is \r\n        // from the center cell (index 40). Diagonals considered one step\r\n        const indexMap = index => {\r\n            // Each statement describes a 2 rows, and 2 columns of cells, which \r\n            // form progresively smaller square borders about the center cell\r\n            if (index === null) {\r\n                // null indicates puzzle clue - return 5 (higher than any other\r\n                // index)\r\n                return 5\r\n            } if (\r\n                index / 9 <= 1 ||\r\n                index / 9 >= 8 ||\r\n                index % 9 === 0 ||\r\n                index % 9 === 8\r\n            ) {\r\n                return 4\r\n            } if (\r\n                index / 9 <= 2 ||\r\n                index / 9 >= 7 ||\r\n                index % 9 === 1 ||\r\n                index % 9 === 7\r\n            ) {\r\n                return 3\r\n            } if (\r\n                index / 9 <= 3 || \r\n                index / 9 >= 6 ||\r\n                index % 9 === 2 ||\r\n                index % 9 === 6\r\n            ) {\r\n                return 2\r\n            } else {\r\n                return 1\r\n            }\r\n        }\r\n        // Returns array of indexes which are NOT occupied by a puzzle clue\r\n        const validIndexArray = context.puzzle.map((value, index) => {\r\n            return value === \"0\" ? index : null\r\n        })\r\n        const indexMapArray = validIndexArray.map(indexMap)\r\n        const minDist = Math.min(...indexMapArray)\r\n        // Returns array of closest valid indexes based on minDist and \r\n        // indexMapArray\r\n        const closestIndexArray = validIndexArray.reduce((acc, cur, index) => {\r\n            return indexMapArray[index] === minDist ? [...acc, cur] : acc\r\n        }, [])\r\n        // Random cell from closestIndexArray\r\n        const selectedCell = closestIndexArray[\r\n            Math.floor(Math.random() * closestIndexArray.length)\r\n        ]\r\n        mainContext.setSelectedCell(selectedCell)\r\n    }\r\n}\r\n\r\n// Exports\r\nexport default useInitSelectedPuzzle","// General imports\r\nimport React, {\r\n    useContext\r\n} from \"react\"\r\n\r\n// Material-ui imports\r\n\r\n// Own imports \r\n    //Context\r\n    import GlobalContext from \"../context/Global\"\r\n    import MainContext from \"../context/Main\"\r\n    // Components\r\n    // Hooks\r\n    import useInitSelectedCell from \"../hooks/initSelectedCell\"\r\n    // Style hooks\r\n    // Other\r\n    import isOddBox from \"../functions/isOddBox\"\r\n\r\n// Component\r\nconst SudokuGrid = props => {\r\n    // State and context\r\n    const context = useContext(GlobalContext)\r\n    const mainContext = useContext(MainContext)\r\n\r\n    // Set a selectedCell in mainContext so that users can interact only with\r\n    // keyboard. selectedCell must NOT be occupied by a puzle clue, hence why\r\n    // it cannot be set by default in MainState component, since it is in a\r\n    // different position for each puzzle\r\n    useInitSelectedCell()\r\n\r\n    // Styles\r\n    const styles = props.styles\r\n\r\n    // Pre-render components\r\n    // Nested divs used for sudoku instead of table since div styling is easier,\r\n    // and a sudoku is not really a table in so far as benefitting from being\r\n    // rendered by an HTML table\r\n    // Mapping over cells in the puzzle, and rendering them each depending on if\r\n    // there is an answer, candidate array, etc. available    \r\n    const displayArray = context.puzzle.map((cell, index) => {\r\n        // Returns array of cells from puzzle, conditionally rendering answers,\r\n        // candidates, and clues with different styles\r\n        if (cell === \"0\" && context.answer[index] !== \"0\") {\r\n            return (\r\n                <div  \r\n                    key = {index} \r\n                    className = {`\r\n                        ${styles.answer} \r\n                        ${isOddBox(index) ? styles.light : styles.dark}\r\n                        ${\r\n                            mainContext.selectedCell === index ? \r\n                                styles.selected : \r\n                                null\r\n                        }\r\n                    `} \r\n                    onClick = {() => \r\n                        mainContext.setSelectedCell(index)\r\n                    }\r\n                >\r\n                    {context.answer[index]}\r\n                </div>\r\n            )\r\n        } else if (cell === \"0\" && context.test[index] !== \"0\") {\r\n            return (\r\n                <div  \r\n                    key = {index} \r\n                    className = {`\r\n                        ${styles.test}\r\n                        ${\r\n                            mainContext.firstTest === index ? \r\n                                styles.first : \r\n                                styles.remainder\r\n                        } \r\n                        ${isOddBox(index) ? styles.light : styles.dark}\r\n                        ${\r\n                            mainContext.selectedCell === index ? \r\n                                styles.selected : \r\n                                null\r\n                        }\r\n                    `}\r\n                    onClick = {() =>\r\n                        mainContext.setSelectedCell(index)\r\n                    }\r\n                >\r\n                    {context.test[index]}\r\n                </div>\r\n            )\r\n        } else if (cell === \"0\") {\r\n            return (\r\n                <div  \r\n                    key = {index} \r\n                    className = {`\r\n                        ${styles.candidate} \r\n                        ${isOddBox(index) ? styles.light : styles.dark}\r\n                        ${\r\n                            mainContext.selectedCell === index ? \r\n                                styles.selected : \r\n                                null\r\n                        }\r\n                    `}\r\n                    onClick = {() =>\r\n                        mainContext.setSelectedCell(index)\r\n                    }\r\n                >\r\n                    {context.candidates[index].join(\" \")}\r\n                </div>\r\n            )\r\n        }  else {\r\n            // Permanent values of puzzle that must not be changed - hence no\r\n            // onClick function, as client will not interact here. Also no\r\n            // selected cell, as client will not interact here\r\n            return (\r\n                <div  key = {index} className = {`\r\n                    ${styles.puzzle} \r\n                    ${isOddBox(index) ? styles.light : styles.dark}\r\n                `}>\r\n                    {cell}\r\n                </div>\r\n            )\r\n        }\r\n    })\r\n\r\n    // Cells to rows for display\r\n    const rows = []\r\n    for (let count = 0; count < 9; count++) {\r\n        rows.push(\r\n            <div key = {count} className = {styles.row}>\r\n                {displayArray.splice(0,9)}\r\n            </div>  \r\n        )  \r\n    }\r\n\r\n    // Component render JSX\r\n    return (\r\n        <div className = {styles.sudoku}>\r\n            {rows}\r\n        </div>\r\n    )\r\n}\r\n\r\n// Exports\r\nexport default SudokuGrid\r\n","// General imports\r\nimport React, {\r\n    useContext\r\n} from \"react\"\r\n\r\n// Material-ui imports\r\nimport { \r\n    Dialog,\r\n    DialogTitle,\r\n    DialogActions,\r\n    DialogContentText,\r\n    DialogContent,\r\n    Button\r\n} from \"@material-ui/core\"\r\n\r\n// Own imports \r\n    //Context\r\n    import GlobalContext from \"../../context/Global\"\r\n    import MainContext from \"../../context/Main\"\r\n    // Components\r\n    // Hooks\r\n    // Style hooks\r\n\r\n// Component - Renders a message depending on how many answers were incorrect,\r\n// and if the puzzle was completed or not - Popup dialog box for informing \r\n// client of how many answers were incorrect\r\nconst CheckDialog = props => {\r\n    // State and context\r\n    const context = useContext(GlobalContext)\r\n    const mainContext = useContext(MainContext)\r\n\r\n    // Styles\r\n    const styles = props.styles\r\n\r\n    // Helper functions\r\n    const isComplete = () => {\r\n        // Checking to see if answer is complete and correct. Note that \r\n        // comparing context.answer with context.solution using === will still \r\n        // return false, even  if the answer is completed correctly. Therefore \r\n        // the below array.reduce must be used instead\r\n        context.answer.reduce((acc, cur, index) => {\r\n            return acc ? \r\n                (cur === context.solution[index] ? \r\n                    true : false) : false\r\n        }, true)\r\n    }\r\n\r\n    // Pre-render components\r\n    let result\r\n    let requiredStyle\r\n    if (isComplete()) {\r\n        result = `Congratulations! You have completed the puzzle correctly. 😄`\r\n        requiredStyle = styles.notificationDialog\r\n    } else if (mainContext.answersRemoved === 0) {\r\n        result = `All your answers are correct 😀, but you still haven't\r\n            finished the puzzle... 😐`\r\n        requiredStyle = styles.notificationDialog\r\n    } else if (mainContext.answersRemoved === 1) {\r\n        result = `1 answer was incorrect 😧`\r\n        requiredStyle = styles.errorDialog\r\n    } else {\r\n        result = `${mainContext.answersRemoved} answers were incorrect 😧`\r\n        requiredStyle = styles.errorDialog\r\n    }\r\n\r\n    // Component render JSX\r\n    return (\r\n        <Dialog \r\n            open = {mainContext.currentDialog === mainContext.dialogs.CHECK}\r\n            onEscapeKeyDown = {() => { mainContext.setCurrentDialog(null) }}\r\n            maxWidth = \"xs\"\r\n            className = {requiredStyle}\r\n        >\r\n            <DialogTitle>\r\n                Result\r\n            </DialogTitle>\r\n\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                {result}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button \r\n                    onClick = {() => { mainContext.setCurrentDialog(null) }} \r\n                    autoFocus\r\n                >\r\n                    OK\r\n                </Button>\r\n            </DialogActions>                        \r\n        </Dialog>\r\n    )\r\n}\r\n\r\n// Exports\r\nexport default CheckDialog","// General imports\r\n/*eslint-disable no-unused-vars*/\r\nimport React, {\r\n    useContext\r\n} from \"react\"\r\n\r\n// Material-ui imports\r\nimport { \r\n    Dialog,\r\n    DialogTitle,\r\n    DialogActions,\r\n    DialogContentText,\r\n    DialogContent,\r\n    Button\r\n} from \"@material-ui/core\"\r\n\r\n// Own imports \r\n    //Context\r\n    import MainContext from \"../../context/Main\"\r\n    // Components\r\n    // Hooks\r\n    // Style hooks\r\n\r\n// Component - Popup dialog box for informing client that the puzzle will be \r\n// reset if they continue\r\nconst RestartDialog = props => {\r\n    // State and context\r\n    const mainContext = useContext(MainContext)\r\n\r\n    //Styles\r\n    const styles = props.styles\r\n\r\n    // Helper functions\r\n\r\n    // Pre-render components\r\n\r\n    // Component render JSX\r\n    return (\r\n        <Dialog \r\n            open = {mainContext.currentDialog === \r\n                mainContext.dialogs.RESTART}\r\n            onEscapeKeyDown = {() => { mainContext.setCurrentDialog(null) }}\r\n            maxWidth = \"xs\"\r\n            className = {styles.errorDialog}\r\n        >                        \r\n            <DialogTitle>\r\n                Are you sure?\r\n            </DialogTitle>\r\n\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    {`This action will reset the ENTIRE puzzle, \r\n                    removing all answers, and candidates. Any \r\n                    candidates, or answers that you have placed WILL \r\n                    be overwritten❗️`}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n        \r\n            <DialogActions>\r\n                <Button \r\n                    onClick = {() => { mainContext.setCurrentDialog(null) }} \r\n                    color=\"primary\"\r\n                >\r\n                    CANCEL\r\n                </Button>\r\n                <Button \r\n                    onClick = {() => {\r\n                        mainContext.setCurrentDialog(null)\r\n                        mainContext.handleRestart()\r\n                    }} \r\n                    color=\"primary\" \r\n                    autoFocus\r\n                >\r\n                    OK\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n// Exports\r\nexport default RestartDialog\r\n                    ","// General imports\r\n/*eslint-disable no-unused-vars*/\r\nimport React, {\r\n    useContext\r\n} from \"react\"\r\n\r\n// Material-ui imports\r\nimport { \r\n    Dialog,\r\n    DialogTitle,\r\n    DialogActions,\r\n    DialogContentText,\r\n    DialogContent,\r\n    Button\r\n} from \"@material-ui/core\"\r\n\r\n// Own imports \r\n    //Context\r\n    import MainContext from \"../../context/Main\"\r\n    // Components\r\n    // Hooks\r\n    // Style hooks\r\n\r\n// Component - Popup dialog box for informing client that all candidates will \r\n// be overwritten\r\nconst PopulateDialog = props => {\r\n    // State and context\r\n    const mainContext = useContext(MainContext)\r\n\r\n    //Styles\r\n    const styles = props.styles\r\n\r\n    // Helper functions\r\n\r\n    // Pre-render components\r\n\r\n    // Component render JSX\r\n    return (        \r\n        <Dialog \r\n            open = {mainContext.currentDialog === \r\n                mainContext.dialogs.POPULATE_CANDIDATES}\r\n            onEscapeKeyDown = {() => { mainContext.setCurrentDialog(null) }}\r\n            maxWidth = \"xs\"\r\n            className = {styles.cautionDialog}\r\n        >\r\n            <DialogTitle>\r\n                Are you sure?\r\n            </DialogTitle>\r\n\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    {`This action will populate all empty cells with\r\n                    all candidates from 1 to 9. Any candidates that\r\n                    you have placed WILL be overwritten❗️`}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n\r\n            <DialogActions>\r\n                <Button \r\n                    onClick = {() => { mainContext.setCurrentDialog(null) }} \r\n                    color=\"primary\"\r\n                >\r\n                    CANCEL\r\n                </Button>\r\n                <Button \r\n                    onClick = {() => {\r\n                        mainContext.setCurrentDialog(null)\r\n                        mainContext.handlePopulateCandidates()\r\n                    }} \r\n                    color=\"primary\" \r\n                    autoFocus\r\n                >\r\n                    OK\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n// Exports\r\nexport default PopulateDialog\r\n                    ","// General imports\r\n/*eslint-disable no-unused-vars*/\r\nimport React, {\r\n    useContext\r\n} from \"react\"\r\n\r\n// Material-ui imports\r\nimport { \r\n    Dialog,\r\n    DialogTitle,\r\n    DialogActions,\r\n    DialogContentText,\r\n    DialogContent,\r\n    Button\r\n} from \"@material-ui/core\"\r\n\r\n// Own imports \r\n    //Context\r\n    import MainContext from \"../../context/Main\"\r\n    // Components\r\n    // Hooks\r\n    // Style hooks\r\n\r\n// Component - Popup dialog box for informing client that the puzzle will be \r\n// reset if they continue\r\nconst Test = props => {\r\n    // State and context\r\n    const mainContext = useContext(MainContext)\r\n\r\n    //Styles\r\n    const styles = props.styles\r\n\r\n    // Helper functions\r\n\r\n    // Pre-render components\r\n\r\n    // Component render JSX\r\n    return (\r\n        <Dialog \r\n            open = {mainContext.currentDialog === \r\n                mainContext.dialogs.TEST}\r\n            onEscapeKeyDown = {() => { mainContext.setCurrentDialog(null) }}\r\n            maxWidth = \"xs\"\r\n            className = {styles.notificationDialog}\r\n        >                        \r\n            <DialogTitle>\r\n                Choose an option...\r\n            </DialogTitle>\r\n\r\n            {/* Lists may not appear as descendats of p elements (given errror),\r\n            so list of choices is formatted as below */}\r\n            <DialogContent>\r\n\r\n                <DialogContentText>\r\n                    To continue with the puzzle, there are three options to \r\n                    complete your test:\r\n                </DialogContentText>\r\n\r\n                <ol>\r\n\r\n                    <li>\r\n                        Delete the test numbers, and do nothing (DELETE)\r\n                    </li>\r\n\r\n                    <li>\r\n                        Delete the test number, and remove the first\r\n                        test number (indicated in red) as a potential\r\n                        candidate from its cell (REMOVE)\r\n                    </li>\r\n\r\n                    <li>\r\n                        Commit all the test numbers to your answer (ANSWER)\r\n                    </li>\r\n\r\n                </ ol>\r\n\r\n                <DialogContentText>\r\n                    Press the number matching your choice, or select a button\r\n                    below.\r\n                </DialogContentText>  \r\n\r\n            </DialogContent>\r\n        \r\n            <DialogActions>\r\n            <Button \r\n                    onClick = {() => { mainContext.deleteTest() }} \r\n                    color=\"primary\"\r\n                >\r\n                    DELETE\r\n                </Button>\r\n                <Button \r\n                    onClick = {() => { mainContext.removeInitCandidate() }} \r\n                    color=\"primary\"\r\n                >\r\n                    REMOVE\r\n                </Button>\r\n                <Button \r\n                    onClick = {() => { mainContext.testToAnswer() }} \r\n                    color=\"primary\" \r\n                >\r\n                    ANSWER\r\n                </Button>\r\n                <Button \r\n                    onClick = {() => { mainContext.setCurrentDialog(null) }} \r\n                    color=\"primary\" \r\n                    autoFocus\r\n                >\r\n                    CANCEL\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\n// Exports\r\nexport default Test\r\n                    ","// General imports\r\nimport { \r\n    useContext\r\n} from \"react\"\r\n\r\n// Own imports\r\nimport GlobalContext from \"../context/Global\"\r\nimport {\r\n    encode\r\n} from \"../functions/sudokuEncode\"\r\n\r\n// Custom hook\r\n// Store puzzle in local storage after each change by the client\r\nconst useStorePuzzle = () => {\r\n    const context = useContext(GlobalContext)\r\n    // Do not continue if there is no valid puzzle in context!\r\n    if (context.puzzle.length !== 81 ||\r\n        context.solution.length !== 81 ||\r\n        context.answer.length !== 81 ||\r\n        context.candidates.length !== 81 ||\r\n        context.test.length !== 81\r\n    ) {\r\n        return\r\n    } else {\r\n\r\n        const encodedOriginal = encode(\r\n            context.solution.join(\"\"), context.puzzle.join(\"\")\r\n        )\r\n        const encodedAnswer = encode(\r\n            context.solution.join(\"\"), context.answer.join(\"\")\r\n        )\r\n        // encodedOriginal stored as key in local storage, as this is a\r\n        // unique reference to the puzzle, which will cause the value to\r\n        // be overwritten each time the client comes back to the puzzle\r\n        // and makes changes to the answer.\r\n        return localStorage.setItem(encodedOriginal, JSON.stringify({\r\n            // Original stored incase client wants to restart\r\n            puzzle: context.puzzle,\r\n            solution: context.solution,\r\n            answer: context.answer,\r\n            candidates: context.candidates,\r\n            // First test is not stored in global context, and therefore any \r\n            // tests may not be stored in local storage if first test is to\r\n            // be rendered up reload\r\n            test: context.puzzle,\r\n            encodedOriginal: encodedOriginal,\r\n            encodedAnswer: encodedAnswer,\r\n            lastActive: new Date()\r\n        }))\r\n    }\r\n}\r\n\r\n// Exports\r\nexport default useStorePuzzle","// General imports\r\nimport { \r\n    useContext \r\n} from \"react\"\r\n\r\n// Own imports \r\n    //Context & States\r\n    import GlobalContext from \"../context/Global\"\r\n    // Hooks\r\n    import useGetPuzzles from \"./getPuzzles\"\r\n    // Other\r\n    import {\r\n        decode \r\n    } from \"../functions/sudokuEncode\"\r\n\r\n// Custom hook - loads a puzzle into context from the default puzzle variable.\r\n// upon loading into context, this variable will either be the same default\r\n// puzzle, the most recent puzzle in the local storage, or a puzzle loaded\r\n// from the url hash (in order of pref. hash - local - default)\r\nconst useSetPuzzle = () => {\r\n    // Context & state\r\n    const localPuzzles = useGetPuzzles()\r\n    const context = useContext(GlobalContext)\r\n    \r\n    // Some default puzzle, so that a puzzle can always displayed, and when\r\n    // hook attempts to set puzzle to state, there will always be a valid \r\n    // puzzle to set.\r\n    const defaultEncodedPuzzle = \"Fzmyx2h.eWi6C.L2s925y.8yYK6jc.\" +\r\n        \"D4zgJ5.r6xv~q.io-bGRx.wdbEZf.PltXo304\"\r\n    const defaultDecodedSolution = decode(defaultEncodedPuzzle)[0].split(\"\")\r\n    const defaultDecodedPuzzle = decode(defaultEncodedPuzzle)[1].split(\"\")\r\n    let defaultPuzzle = {\r\n        puzzle: defaultDecodedPuzzle,\r\n        solution: defaultDecodedSolution,\r\n        answer: defaultDecodedPuzzle,\r\n        candidates: defaultDecodedPuzzle.map(() => []),\r\n        test: defaultDecodedPuzzle,\r\n        encodedOriginal: defaultEncodedPuzzle,\r\n        econdedAnswer: defaultEncodedPuzzle,\r\n        lastActive: null\r\n    }\r\n\r\n    /*eslint no-restricted-globals: 0*/\r\n    // Fetch encoded puzzle from url hash, decode, and separate into parts\r\n    const encodedPuzzle = location.hash.replace(\"#\",\"\")\r\n    const decodedPuzzle = decode(encodedPuzzle)\r\n    const solution = decodedPuzzle[0].split(\"\")\r\n    const puzzle = decodedPuzzle[1].split(\"\")\r\n\r\n    // Conditionally updating default puzzle with new puzzle, providing that a \r\n    // puzzle of the correct format has been provided (in this case a 9x9 \r\n    // sudoku) by the hash, or local storage. Note that the validity of the \r\n    // sudoku is NOT checked, only the format is checked.\r\n    if (\r\n        // Checking if a correctly formatted puzzle is already loaded into \r\n        // context. No futher action required if true\r\n        context.solution.length === 81 &&\r\n        context.puzzle.length === 81 &&\r\n        context.answer.length === 81 &&\r\n        context.candidates.length === 81 &&\r\n        context.test.length === 81\r\n    ) { \r\n        // Context not changed, preventing a re-render of the component calling\r\n        // this hook, and therefore preventing this hook being called in an\r\n        // infinite loop\r\n        return\r\n    } else if (\r\n        // Checking to see if a correctly formatted sudoku has been passed \r\n        // in the url hash - returns true if hash is incorrect\r\n        encodedPuzzle === \"\" || \r\n        decodedPuzzle.length !== 2 || \r\n        solution.length !== 81 || \r\n        puzzle.length !== 81\r\n    ) {\r\n        // Checking to see if any puzzles are stored in local storage, and \r\n        // recovering them, then setting the most recent puzzle to context\r\n        if (localPuzzles.length !== 0) {\r\n            const latestPuzzle = localPuzzles.reduce((acc, cur) => {\r\n                // Return the puzzle which was active most recently\r\n                return acc.lastActive > cur.lastActive ? acc : cur\r\n            })\r\n            defaultPuzzle = latestPuzzle\r\n        } \r\n    } else {        \r\n        // Send puzzle from hash to be loaded by useLoadPuzzle. Note that answer\r\n        // and puzzle are one and the same, since the client has yet to \r\n        // interact with the puzzle\r\n        defaultPuzzle = {\r\n            puzzle: puzzle,\r\n            solution: solution,\r\n            answer: puzzle,\r\n            candidates: puzzle.map(() => []),\r\n            test: puzzle,\r\n            encodedOriginal: encodedPuzzle,\r\n            econdedAnswer: encodedPuzzle,\r\n            lastActive: null\r\n        }\r\n    }    \r\n\r\n    // Populate GlobalContext with new value of defaultPuzzle\r\n    context.setSolution(defaultPuzzle.solution)\r\n    context.setPuzzle(defaultPuzzle.puzzle)\r\n    defaultPuzzle.answer.map((value, index) => {\r\n        // Index not strictly required\r\n        return context.setAnswer.add(value, index)\r\n    })\r\n    // Remove all candidates\r\n    context.setCandidate.burnAll()\r\n    // Reset candidates as an array of empty arrays for each cell\r\n    defaultPuzzle.candidates.map(() => {\r\n        return context.setCandidate.add([])\r\n    })\r\n    defaultPuzzle.candidates.map((candidateArray, index) => {\r\n        return candidateArray.map(candidate => {\r\n            // Index not strictly required\r\n            return context.setCandidate.add(candidate, index)\r\n        })\r\n    })\r\n    defaultPuzzle.test.map((value, index) => {\r\n        // Index not strictly required\r\n        return context.setTest.add(value, index)\r\n    })\r\n\r\n    // Remove hash from url, so that this hook does not attempt to set\r\n    // context again upon re-render. Keep client on current url path.\r\n    history.replaceState({}, document.title, location.pathname)\r\n    return context\r\n    /*eslint no-restricted-globals: 1*/\r\n}\r\n\r\n// Exports\r\nexport default useSetPuzzle","// General imports\r\n\r\n// Material-ui imports\r\nimport { \r\n    makeStyles\r\n} from \"@material-ui/styles\"\r\n\r\n// Own imports\r\n\r\n// Styles\r\nconst useAppStyles = makeStyles({\r\n    app: {\r\n        \r\n    }\r\n})\r\n\r\n// Exports\r\nexport default useAppStyles","// General imports\nimport React from \"react\"\n/*eslint-disable no-unused-vars*/\nimport { \n    /*Router must be imported for its functionality to work, even though the \n    Router component wraps the parent App component.*/\n    BrowserRouter as Router, Route, Redirect, Switch, Link\n} from \"react-router-dom\"\n/*eslint-enable no-unused-vars*/\n\n// Material-ui imports\nimport { \n    GridList,\n    GridListTile\n} from \"@material-ui/core\"\n\n// Own imports - styles\nimport \"./styles/index.scss\"\n\n// Own imports \n    //Context & States\n    import HeaderState from \"./context/states/Header\"\n    import MainState from \"./context/states/Main\"\n    // Components\n    import {\n        Main,\n        Header\n    } from \"./components/exports\"\n    // Hooks\n    import useStorePuzzle from \"./hooks/storePuzzle\"\n    import useSetPuzzle from \"./hooks/setPuzzle\"\n    // Style hooks\n    import useAppStyles from \"./styles/hooks/app\"\n\n// Component\nconst App = () => {  \n    // State and context\n\n    // Load puzzle into context, and watch changes\n    useSetPuzzle()   // set puzzle from hash, local storage, or a default puzzle\n    useStorePuzzle() // save any change to local storage with new Date\n\n    // Styles\n    const styles = useAppStyles()\n\n    // Component render JSX\n    return (\n        <Router className = {styles.app}>\n\n            <GridList cellHeight = \"auto\" spacing = {0}>\n\n                <GridListTile cols = {2} rows = {1}>\n                    <HeaderState>\n                        <Header />\n                    </HeaderState>                   \n                </GridListTile>\n\n                <GridListTile cols = {2} rows = {1}>\n                    <MainState>\n                        <Main />\n                    </MainState>\n                </GridListTile>\n                \n            </GridList>  \n\n        </Router>   \n    )\n}\n\n// Exports\nexport default App\n","// Exports\r\nexport const ADD_ANSWER = \"ADD_ANSWER\"\r\nexport const REMOVE_ANSWER = \"REMOVE_ANSWER\"\r\n\r\nexport const answerReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case ADD_ANSWER:\r\n            return addAnswer(action.answer, action.index, state)\r\n        case REMOVE_ANSWER:\r\n            return removeAnswer(action.index, state)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Array of possible answers (numbers 1-9) - used to prevent setting of\r\n// incorrectly formatted answers. 0 included to represent no answer\r\nconst answers = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\r\n\r\n// Reducer declaration\r\nconst addAnswer = (answer, ansIndex, state) => {\r\n    // Allows for setting of initial answer (equal to puzzle).\r\n    if (state.length < 81) {\r\n        state.push(answer)\r\n        return state\r\n    } if (!answers.includes(answer)) {\r\n        // Prevent setting of an incorrectly formatted answer!\r\n        return state\r\n    } else {\r\n        return state.map((value, index) => {\r\n            if (index === ansIndex) {\r\n                return answer\r\n            } else {\r\n                return value\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst removeAnswer = (ansIndex, state) => {\r\n    return state.map((value, index) => {\r\n        if (index === ansIndex) {\r\n            return \"0\"\r\n        } else {\r\n            return value\r\n        }\r\n    })\r\n}","// Exports\r\nexport const ADD_CANDIDATE = \"ADD_CANDIDATE\"\r\nexport const REMOVE_CANDIDATE = \"REMOVE_CANDIDATE\"\r\nexport const BURN_ONE = \"BURN_ONE\"\r\nexport const BURN_CANDIDATES = \"BURN_CANDIDATES\"\r\n\r\nexport const candidateReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case ADD_CANDIDATE:\r\n            return addCandidate(action.candidate, action.index, state)\r\n        case REMOVE_CANDIDATE:\r\n            return removeCandidate(action.candidate, action.index, state)\r\n        case BURN_ONE:\r\n            return burnOne(action.index, state)\r\n        case BURN_CANDIDATES:\r\n            return burnCandidates()\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Array of possible candidates (numbers 1-9) - used to prevent setting of\r\n// incorrectly formatted candidates. 0 not included, as no candidates is \r\n// indicated by empty array\r\nconst candidates = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\r\n\r\n\r\n// Reducer declaration\r\nconst addCandidate = (candidate, candidateIndex, state) => {\r\n    // Allows for setting of initial candidates (just an empty array for each \r\n    // cell).\r\n    if (state.length < 81) {\r\n        state.push(candidate)\r\n        return state\r\n    } if (!candidates.includes(candidate)) {\r\n        // Prevent setting of an incorrectly formatted answer!\r\n        return state\r\n    } else {\r\n        return state.map((value, index) => {\r\n            if (index === candidateIndex) {\r\n                if (value.includes(candidate)) {\r\n                    return value\r\n                } else {\r\n                    value.push(candidate)\r\n                    return value\r\n                }\r\n            } else {\r\n                return value\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst removeCandidate = (candidate, candidateIndex, state) => {\r\n    return state.map((value, index) => {\r\n        if (index === candidateIndex) {\r\n            value.splice(value.indexOf(candidate), 1)\r\n            return value\r\n        } else {\r\n            return value\r\n        }\r\n    })\r\n}\r\n\r\nconst burnOne = (candidateIndex, state) => {\r\n    return state.map((value, index) => {\r\n        if (index === candidateIndex) {\r\n            return []\r\n        } else {\r\n            return value\r\n        }\r\n    })\r\n}\r\n\r\nconst burnCandidates = () => {\r\n    return []\r\n}","// Exports\r\nexport const ADD_TEST = \"ADD_TEST\"\r\nexport const REMOVE_TEST = \"REMOVE_TEST\"\r\n\r\nexport const testReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case ADD_TEST:\r\n            return addTest(action.test, action.index, state)\r\n        case REMOVE_TEST:\r\n            return removeTest(action.index, state)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Array of possible tests (numbers 1-9) - used to prevent setting of\r\n// incorrectly formatted tests. 0 included to represent no test\r\nconst tests = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\r\n\r\n// Reducer declaration\r\nconst addTest = (test, testIndex, state) => {\r\n    // Allows for setting of initial test (equal to puzzle).\r\n    if (state.length < 81) {\r\n        state.push(test)\r\n        return state\r\n    } if (!tests.includes(test)) {\r\n        // Prevent setting of an incorrectly formatted test!\r\n        return state\r\n    } else {\r\n        return state.map((value, index) => {\r\n            if (index === testIndex) {\r\n                return test\r\n            } else {\r\n                return value\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst removeTest = (testIndex, state) => {\r\n    return state.map((value, index) => {\r\n        if (index === testIndex) {\r\n            return \"0\"\r\n        } else {\r\n            return value\r\n        }\r\n    })\r\n}","// General imports\r\nimport React, {\r\n    useState,\r\n    useReducer\r\n} from \"react\"\r\n\r\n// Own imports\r\nimport GlobalContext from \"../Global\"\r\nimport {\r\n    answerReducer,\r\n    ADD_ANSWER,\r\n    REMOVE_ANSWER\r\n } from \"../reducers/answer\"\r\nimport {\r\n    candidateReducer,\r\n    ADD_CANDIDATE,\r\n    REMOVE_CANDIDATE,\r\n    BURN_ONE,\r\n    BURN_CANDIDATES\r\n } from \"../reducers/candidate\"\r\n import {\r\n    testReducer,\r\n    ADD_TEST,\r\n    REMOVE_TEST\r\n } from \"../reducers/test\"\r\n\r\n// Component\r\nconst GlobalState = props => {\r\n    const [puzzle, setPuzzle] = useState([])\r\n    const [solution, setSolution] = useState([])\r\n    const [answer, dispatchAnswer] = useReducer(\r\n        answerReducer, \r\n        // Default value\r\n        []\r\n    )\r\n    // Note candidates vs candidate differentation. Each cell may have many \r\n    // candidates, but each button click or keypress will remove/add 1 candidate \r\n    // at a time only\r\n    const [candidates, dispatchCandidate] = useReducer(\r\n        candidateReducer,\r\n        // Default value\r\n        []\r\n    )\r\n    const [test, dispatchTest] = useReducer(\r\n        testReducer,\r\n        // Default value\r\n        []\r\n    )\r\n\r\n    // Reducers as objects with their relevant functions\r\n    const setAnswer = {\r\n        add: (answer, index) => {\r\n            dispatchAnswer({\r\n                type: ADD_ANSWER,\r\n                answer: answer,\r\n                index: index\r\n            })\r\n        },\r\n        remove: index => {\r\n            dispatchAnswer({\r\n                type: REMOVE_ANSWER,\r\n                index: index\r\n            })\r\n        }\r\n    }\r\n\r\n    const setCandidate = {\r\n        add: (candidate, index) => {\r\n            dispatchCandidate({\r\n                type: ADD_CANDIDATE,\r\n                candidate: candidate,\r\n                index: index\r\n            })\r\n        },\r\n        remove: (candidate, index) => {\r\n            dispatchCandidate({\r\n                type: REMOVE_CANDIDATE,\r\n                candidate: candidate,\r\n                index: index\r\n            })\r\n        },\r\n        burnOne: (index) => {\r\n            dispatchCandidate({\r\n                type: BURN_ONE,\r\n                index: index\r\n            })\r\n        },\r\n        burnAll: () => {\r\n            dispatchCandidate({\r\n                type: BURN_CANDIDATES\r\n            })\r\n        }\r\n    }\r\n\r\n    const setTest = {\r\n        add: (test, index) => {\r\n            dispatchTest({\r\n                type: ADD_TEST,\r\n                test: test,\r\n                index: index\r\n            })\r\n        },\r\n        remove: index => {\r\n            dispatchTest({\r\n                type: REMOVE_TEST,\r\n                index: index\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider value = {{\r\n            // Context values\r\n            puzzle: puzzle,\r\n            solution: solution,\r\n            answer: answer,\r\n            candidates: candidates,\r\n            test: test,\r\n            // Asignment functions\r\n            setPuzzle: setPuzzle,\r\n            setSolution: setSolution,\r\n            setAnswer: setAnswer,\r\n            setCandidate: setCandidate,\r\n            setTest: setTest\r\n        }} >\r\n            {props.children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}\r\n\r\n// Exports\r\nexport default GlobalState","// General imports\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport * as serviceWorker from \"./serviceWorker\"\n\n// Material-ui imports\nimport { \n    ThemeProvider \n} from \"@material-ui/styles\"\nimport \"typeface-roboto\"\n\n// Own imports - styles\nimport \"./styles/index.scss\"\nimport theme from \"./styles/theme.js\"\n\n// Own imports - components\nimport App from \"./App\"\nimport GlobalState from \"./context/states/Global\"\n\nReactDOM.render( \n    <GlobalState>\n        <ThemeProvider theme = {theme}> \n            <App />\n        </ThemeProvider>\n    </GlobalState>,\n    document.getElementById(\"root\")\n)\n\nserviceWorker.register()\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryColor1\":\"#7D73B2\",\"primaryColor2\":\"#675CA5\",\"primaryColor3\":\"#514599\",\"primaryColor4\":\"#3C2E8C\",\"primaryColor5\":\"#26177F\",\"primaryColor6\":\"#110073\",\"primaryColor7\":\"#100069\",\"primaryColor8\":\"#0E005F\",\"primaryColor9\":\"#0D0054\",\"primaryColor10\":\"#0B004A\",\"primaryColor11\":\"#0A003F\",\"secondaryColor1\":\"#A2CCCC\",\"secondaryColor2\":\"#8BBFBF\",\"secondaryColor3\":\"#73B2B2\",\"secondaryColor4\":\"#5CA5A5\",\"secondaryColor5\":\"#459999\",\"secondaryColor6\":\"#2E8C8C\",\"secondaryColor7\":\"#177F7F\",\"secondaryColor8\":\"#007373\",\"secondaryColor9\":\"#006969\",\"secondaryColor10\":\"#005F5F\",\"secondaryColor11\":\"#005454\",\"neutralColor1\":\"#F3F5F6\",\"neutralColor2\":\"#F2F4F5\",\"neutralColor3\":\"#F1F3F5\",\"neutralColor4\":\"#DCDDDF\",\"neutralColor5\":\"#C6C7C9\",\"neutralColor6\":\"#B0B1B3\",\"neutralColor7\":\"#9A9B9C\",\"neutralColor8\":\"#848586\",\"neutralColor9\":\"#6E6F70\",\"neutralColor10\":\"#58595A\",\"neutralColor11\":\"#424343\",\"neutralColor12\":\"#2C2D2D\",\"neutralColor13\":\"#161717\",\"greenHighlight1\":\"#C1E773\",\"greenHighlight2\":\"#B7E35C\",\"greenHighlight3\":\"#ADDF45\",\"greenHighlight4\":\"#A3DB2E\",\"greenHighlight5\":\"#99D717\",\"greenHighlight6\":\"#8FD400\",\"greenHighlight7\":\"#82C100\",\"greenHighlight8\":\"#76AE00\",\"greenHighlight9\":\"#699B00\",\"greenHighlight10\":\"#5C8700\",\"greenHighlight11\":\"#4E7400\",\"yellowHighlight1\":\"#FFF573\",\"yellowHighlight2\":\"#FFF45C\",\"yellowHighlight3\":\"#FFF245\",\"yellowHighlight4\":\"#FFF12E\",\"yellowHighlight5\":\"#FFEF17\",\"yellowHighlight6\":\"#FFEE00\",\"yellowHighlight7\":\"#E8D900\",\"yellowHighlight8\":\"#D1C300\",\"yellowHighlight9\":\"#BAAE00\",\"yellowHighlight10\":\"#A39800\",\"yellowHighlight11\":\"#8C8200\",\"redHighlight1\":\"#EA8585\",\"redHighlight2\":\"#E67171\",\"redHighlight3\":\"#E35D5D\",\"redHighlight4\":\"#DF4949\",\"redHighlight5\":\"#DC3535\",\"redHighlight6\":\"#D92121\",\"redHighlight7\":\"#C61E1E\",\"redHighlight8\":\"#B21C1C\",\"redHighlight9\":\"#9E1919\",\"redHighlight10\":\"#8B1515\",\"redHighlight11\":\"#771212\"};"],"sourceRoot":""}